import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,b as d,w as a,r as k,o as g,d as s,e as l}from"./app-Cpux-nHp.js";const c={};function o(A,i){const h=k("Tabs");return g(),r("div",null,[i[8]||(i[8]=t('<h1 id="消息队列-rabbitmq" tabindex="-1"><a class="header-anchor" href="#消息队列-rabbitmq"><span>消息队列 - RabbitMQ</span></a></h1><h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h2><div class="hint-container tip"><p class="hint-container-title">优点总结</p><ul><li>耦合度低，扩展性强</li><li>异步调用，无需等待，性能好</li><li>故障隔离</li><li>缓存消息，流量削峰</li></ul></div><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h2><ul><li>对于对方的执行结果不关心（执行成功也好失败也好对整个业务没有太大影响）</li><li>调用链串行变并行，提高速率</li></ul><h2 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型"><span>技术选型</span></a></h2>',6)),d(h,{id:"48",data:[{id:"RabbitMQ"},{id:"Kafka"},{id:"RocketMQ"},{id:"ActiveMQ"}],"tab-id":"mq"},{title0:a(({value:n,isActive:e})=>i[0]||(i[0]=[l("RabbitMQ")])),title1:a(({value:n,isActive:e})=>i[1]||(i[1]=[l("Kafka")])),title2:a(({value:n,isActive:e})=>i[2]||(i[2]=[l("RocketMQ")])),title3:a(({value:n,isActive:e})=>i[3]||(i[3]=[l("ActiveMQ")])),tab0:a(({value:n,isActive:e})=>i[4]||(i[4]=[s("ul",null,[s("li",null,"基于 AMQP 协议"),s("li",null,"社区活跃，生态成熟"),s("li",null,"支持多种交换机类型，灵活性强")],-1)])),tab1:a(({value:n,isActive:e})=>i[5]||(i[5]=[s("ul",null,[s("li",null,"高吞吐量，适用于大数据日志"),s("li",null,"顺序性强，分区处理"),s("li",null,"更偏流处理而非任务队列")],-1)])),tab2:a(({value:n,isActive:e})=>i[6]||(i[6]=[s("ul",null,[s("li",null,"支持事务消息"),s("li",null,"延迟消息友好"),s("li",null,"阿里主推产品，国产优势")],-1)])),tab3:a(({value:n,isActive:e})=>i[7]||(i[7]=[s("ul",null,[s("li",null,"功能全面"),s("li",null,"老牌项目，文档齐全"),s("li",null,"对比其他方案活跃度略低")],-1)])),_:1}),i[9]||(i[9]=t(`<hr><h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq"><span>RabbitMQ</span></a></h2><h3 id="安装与登录" tabindex="-1"><a class="header-anchor" href="#安装与登录"><span>安装与登录</span></a></h3><ul><li>请前往 CSDN 或官方文档查看安装细节</li><li>默认管理页面端口：<code>15672</code></li><li>默认账号密码：<code>guest / guest</code></li></ul><h3 id="核心架构与术语" tabindex="-1"><a class="header-anchor" href="#核心架构与术语"><span>核心架构与术语</span></a></h3><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>Publisher</td><td>消息发送者</td></tr><tr><td>Consumer</td><td>消息消费者</td></tr><tr><td>Queue</td><td>消息队列</td></tr><tr><td>Exchange</td><td>交换机，用于路由消息</td></tr></tbody></table><p>生产者将消息发送给交换机，交换机按照配置将消息路由至一个或多个队列。消费者监听指定队列并进行消费。</p><p>VirtualHost 用于服务之间隔离，防止队列冲突。</p><figure><img src="https://i.imgs.ovh/2025/07/11/86u3r.png" alt="架构图" tabindex="0" loading="lazy"><figcaption>架构图</figcaption></figure><p>可通过 Web 控制台进行用户、队列、交换机的管理与绑定。</p><hr><h2 id="spring-amqp" tabindex="-1"><a class="header-anchor" href="#spring-amqp"><span>Spring AMQP</span></a></h2><p>Spring AMQP 是对 AMQP 协议的封装，提供标准化 API。主要包含两部分：</p><ul><li><code>spring-amqp</code>：基础抽象层</li><li><code>spring-rabbit</code>：基于 RabbitMQ 的默认实现</li></ul><h3 id="消费逻辑说明" tabindex="-1"><a class="header-anchor" href="#消费逻辑说明"><span>消费逻辑说明</span></a></h3><p>默认行为：一个队列绑定多个消费者时，会<strong>轮询分发</strong>消息，一个消费者一条，不考虑处理能力。</p><p>优化方式：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rabbitmq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    listener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      simple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        prefetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 prefetch=1，确保同一时刻最多向每个消费者投递一条消息。</p><hr><h2 id="交换机类型" tabindex="-1"><a class="header-anchor" href="#交换机类型"><span>交换机类型</span></a></h2><h3 id="fanout-交换机-广播" tabindex="-1"><a class="header-anchor" href="#fanout-交换机-广播"><span>Fanout 交换机（广播）</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>将消息广播给所有绑定的队列，不区分 RoutingKey。</p></div><h3 id="direct-交换机-定向路由" tabindex="-1"><a class="header-anchor" href="#direct-交换机-定向路由"><span>Direct 交换机（定向路由）</span></a></h3><ul><li>Queue 与 Exchange 设置 BindingKey</li><li>Publisher 指定 RoutingKey</li><li>Exchange 将消息投递到 BindingKey 匹配的队列</li></ul><p><strong>默认类型即为 Direct。</strong></p><h3 id="topic-交换机-通配符匹配" tabindex="-1"><a class="header-anchor" href="#topic-交换机-通配符匹配"><span>Topic 交换机（通配符匹配）</span></a></h3><p>RoutingKey 支持多单词组合（以 <code>.</code> 分隔）</p><ul><li><code>*</code>：匹配一个单词</li><li><code>#</code>：匹配 0 或多个单词</li></ul><p>示例：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>log.*    → 匹配 log.info、log.warn</span></span>
<span class="line"><span>log.#    → 匹配 log.db.error、log.db.conn</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="队列与交换机声明方式" tabindex="-1"><a class="header-anchor" href="#队列与交换机声明方式"><span>队列与交换机声明方式</span></a></h2><h3 id="配置类方式" tabindex="-1"><a class="header-anchor" href="#配置类方式"><span>配置类方式</span></a></h3><p>使用 Java 配置类创建：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RabbitConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Queue</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exampleQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> QueueBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">durable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;example.queue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exchange</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exampleExchange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ExchangeBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">directExchange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;example.exchange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">durable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Binding</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exampleBinding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BindingBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exampleQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exampleExchange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;route.key&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">noargs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解方式" tabindex="-1"><a class="header-anchor" href="#注解方式"><span>注解方式</span></a></h3><p>使用 <code>@RabbitListener</code> 声明监听队列：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RabbitListener</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">queues</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;example.queue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> receive</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> message) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;收到消息: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="消息转换器" tabindex="-1"><a class="header-anchor" href="#消息转换器"><span>消息转换器</span></a></h2><p>Java 对象发送到消息队列时需序列化。推荐使用 Jackson 进行 JSON 转换：</p><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.fasterxml.jackson.core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;jackson-databind&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置类中定义转换器" tabindex="-1"><a class="header-anchor" href="#配置类中定义转换器"><span>配置类中定义转换器</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MessageConverter</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> jsonMessageConverter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Jackson2JsonMessageConverter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>RabbitMQ 适合中等吞吐量场景，功能强、社区成熟</li><li>推荐使用 Spring AMQP 自动声明队列与交换机，简化配置</li><li>根据业务场景合理选择交换机类型</li><li>建议引入消息转换器保障消息格式一致性</li></ul>`,49))])}const b=p(c,[["render",o]]),y=JSON.parse('{"path":"/posts/BiliBiliStudy/RabbitMQ.html","title":"消息队列 - RabbitMQ","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-11T00:00:00.000Z","category":["BiliBli网课"],"tag":["黑马","消息队列","RabbitMQ"],"description":"消息队列 - RabbitMQ 优势 优点总结 耦合度低，扩展性强 异步调用，无需等待，性能好 故障隔离 缓存消息，流量削峰 设计原则 对于对方的执行结果不关心（执行成功也好失败也好对整个业务没有太大影响） 调用链串行变并行，提高速率 技术选型 RabbitMQ 安装与登录 请前往 CSDN 或官方文档查看安装细节 默认管理页面端口：15672 默认账...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列 - RabbitMQ\\",\\"image\\":[\\"https://i.imgs.ovh/2025/07/11/86u3r.png\\"],\\"datePublished\\":\\"2025-07-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-13T10:19:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/BiliBiliStudy/RabbitMQ.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"消息队列 - RabbitMQ"}],["meta",{"property":"og:description","content":"消息队列 - RabbitMQ 优势 优点总结 耦合度低，扩展性强 异步调用，无需等待，性能好 故障隔离 缓存消息，流量削峰 设计原则 对于对方的执行结果不关心（执行成功也好失败也好对整个业务没有太大影响） 调用链串行变并行，提高速率 技术选型 RabbitMQ 安装与登录 请前往 CSDN 或官方文档查看安装细节 默认管理页面端口：15672 默认账..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i.imgs.ovh/2025/07/11/86u3r.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-13T10:19:53.000Z"}],["meta",{"property":"article:tag","content":"RabbitMQ"}],["meta",{"property":"article:tag","content":"消息队列"}],["meta",{"property":"article:tag","content":"黑马"}],["meta",{"property":"article:published_time","content":"2025-07-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-13T10:19:53.000Z"}]]},"git":{"createdTime":1752236147000,"updatedTime":1752401993000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":2}]},"readingTime":{"minutes":2.82,"words":847},"filePathRelative":"posts/BiliBiliStudy/RabbitMQ.md","excerpt":"\\n<h2>优势</h2>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">优点总结</p>\\n<ul>\\n<li>耦合度低，扩展性强</li>\\n<li>异步调用，无需等待，性能好</li>\\n<li>故障隔离</li>\\n<li>缓存消息，流量削峰</li>\\n</ul>\\n</div>\\n<h2>设计原则</h2>\\n<ul>\\n<li>对于对方的执行结果不关心（执行成功也好失败也好对整个业务没有太大影响）</li>\\n<li>调用链串行变并行，提高速率</li>\\n</ul>\\n<h2>技术选型</h2>\\n\\n<hr>\\n<h2>RabbitMQ</h2>","autoDesc":true}');export{b as comp,y as data};
