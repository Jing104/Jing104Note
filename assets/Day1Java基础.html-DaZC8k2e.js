import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as s,o as e}from"./app-DTtECsmZ.js";const n="/assets/image-rajVLxAe.png",p={};function r(h,a){return e(),i("div",null,a[0]||(a[0]=[s(`<h1 id="day1-java基础" tabindex="-1"><a class="header-anchor" href="#day1-java基础"><span>Day1 Java基础</span></a></h1><p><a href="https://imgse.com/i/pVE9mct" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVE9mct.png" alt="pVE9mct.png" loading="lazy"></a><br> 老师默认我们了解Java的相关知识，今天学习的主要内容是JavaSE的复习。</p><h2 id="_01-java基础简介" tabindex="-1"><a class="header-anchor" href="#_01-java基础简介"><span>01 Java基础简介</span></a></h2><h3 id="java历史" tabindex="-1"><a class="header-anchor" href="#java历史"><span>Java历史</span></a></h3><figure><a href="https://imgse.com/i/pVE9tcq" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVE9tcq.png" alt="pVE9tcq.png" tabindex="0" loading="lazy"></a><figcaption>pVE9tcq.png</figcaption></figure><h3 id="java语言特点" tabindex="-1"><a class="header-anchor" href="#java语言特点"><span>Java语言特点</span></a></h3><figure><a href="https://imgse.com/i/pVE9wHU" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVE9wHU.png" alt="pVE9wHU.png" tabindex="0" loading="lazy"></a><figcaption>pVE9wHU.png</figcaption></figure><ul><li>强类型语言？？？<br> （程序跑起来之后里面每一个类型都是确定的）<br> 静态类型检查：<span class="spoiler" tabindex="-1">在程序编译阶段就会进行类型的检查，确保每个变量和函数的使用符合其声明的类型，不匹配时会立即提示错误。</span><br> 提供类型安全：<span class="spoiler" tabindex="-1">由于有静态检查机制，能防止类型错误在运行时出现，增强了程序的安全性和可靠性。</span></li><li>安全性？？？<br> 沙箱机制： 指的是一种安全隔离技术，将程序限制在一个受控的执行环境中运行，防止其对系统其他部分产生影响。即使程序中存在恶意代码，也只能在沙箱中活动，不能访问关键系统资源。<br> 运行时安全检查： 指程序在执行过程中进行的安全检查，比如内存访问是否越界、是否使用了未初始化的变量、是否有权限进行某些操作等。这有助于在程序运行时及时发现并阻止潜在的安全问题。</li></ul><h3 id="java应用领域" tabindex="-1"><a class="header-anchor" href="#java应用领域"><span>Java应用领域</span></a></h3><p><a href="https://imgse.com/i/pVE9fHO" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVE9fHO.png" alt="pVE9fHO.png" loading="lazy"></a><br> 市场上最主要的还是前后端分离的Web，其次就是移动端（个人理解，本质也是前后端分离），Java都作为后端服务。<br><strong>实时处理 vs 离线处理</strong><br> 大数据处理中，实时处理和离线处理是两种主要的数据处理方式，它们的区别体现在处理时效性、技术架构、应用场景等方面。<br> 实时处理是将流数据做一个切割，立即对其进行处理然后放回数据传输；离线处理类似一个延迟的汇总任务，是一个批处理。</p><table><thead><tr><th>项目</th><th>实时处理（Real-time Processing）</th><th>离线处理（Batch / Offline Processing）</th></tr></thead><tbody><tr><td>处理时间</td><td>几毫秒到几秒内</td><td>通常以分钟、小时甚至天为单位</td></tr><tr><td>数据来源</td><td>流式数据（如日志流、传感器数据）</td><td>批量数据（如数据库、文件系统中的历史数据）</td></tr><tr><td>典型工具</td><td>Apache Flink、Apache Storm、Kafka Streams</td><td>Apache Hadoop、Apache Spark（批处理模式）</td></tr><tr><td>数据粒度</td><td>单条或小批量处理</td><td>大批量数据处理</td></tr><tr><td>延迟（Latency）</td><td>极低（低延迟）</td><td>高延迟（可容忍）</td></tr><tr><td>应用场景</td><td>实时监控、欺诈检测、在线推荐</td><td>数据仓库分析、报表生成、训练机器学习模型</td></tr><tr><td>系统复杂度</td><td>更复杂（需要流处理架构）</td><td>相对简单，容错性好</td></tr><tr><td>计算模型</td><td>流计算（Streaming）</td><td>批处理（Batch）</td></tr></tbody></table><h3 id="java基础语法" tabindex="-1"><a class="header-anchor" href="#java基础语法"><span>Java基础语法</span></a></h3><h4 id="数据类型与变量" tabindex="-1"><a class="header-anchor" href="#数据类型与变量"><span>数据类型与变量</span></a></h4><p><a href="https://imgse.com/i/pVE9Xb8" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVE9Xb8.png" alt="pVE9Xb8.png" loading="lazy"></a><br> 实际应用场景中，某些情况，浮点型数据传输是比较浪费的。如果对数据比较敏感，可以自己定义协议来规定数据传输类型（用整型？如何实现？）。</p><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h4><figure><a href="https://imgse.com/i/pVECpCj" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVECpCj.png" alt="pVECpCj.png" tabindex="0" loading="lazy"></a><figcaption>pVECpCj.png</figcaption></figure><h4 id="控制结构" tabindex="-1"><a class="header-anchor" href="#控制结构"><span>控制结构</span></a></h4><figure><a href="https://imgse.com/i/pVECFK0" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVECFK0.png" alt="pVECFK0.png" tabindex="0" loading="lazy"></a><figcaption>pVECFK0.png</figcaption></figure><h4 id="方法-定义与调用" tabindex="-1"><a class="header-anchor" href="#方法-定义与调用"><span>方法（定义与调用）</span></a></h4><p><a href="https://imgse.com/i/pVECAbT" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVECAbT.png" alt="pVECAbT.png" loading="lazy"></a><br> 返回值有的可以通过参数列表返回？？？？</p><h4 id="递归调用" tabindex="-1"><a class="header-anchor" href="#递归调用"><span>递归调用</span></a></h4><p><a href="https://imgse.com/i/pVECnPJ" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVECnPJ.png" alt="pVECnPJ.png" loading="lazy"></a><br> 快速排序，树的节点遍历，二分，斐波那契数列......<br> 练习斐波那契数列：第一项和第二项均为一，从第三项开始，每一项都是前两项的和。</p><h3 id="异常-exception-error" tabindex="-1"><a class="header-anchor" href="#异常-exception-error"><span>异常（Exception&amp;Error）</span></a></h3><p><a href="https://imgse.com/i/pVEChMq" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEChMq.png" alt="pVEChMq.png" loading="lazy"></a><br><a href="https://imgse.com/i/pVEC4s0" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEC4s0.png" alt="pVEC4s0.png" loading="lazy"></a><br><img src="https://t.tutu.to/img/l6s8S" alt="image-a2fbf485c847070e66e11396f333c04e.png" loading="lazy"></p><ul><li><p>Error（错误）：表示运行时环境的错误。错误是程序无法处理的严重问题，如系统崩溃、虚拟机错误、动态链接失败等。通常，程序不应该尝试捕获这类错误。例如，OutOfMemoryError、StackOverflowError等。理论上能够捕获到，但是一般不会捕获，因为实际项目中遇到Error就直接重启服务了</p></li><li><p>Exception（异常）：表示程序本身可以处理的异常条件。异常分为两大类：</p><ul><li>非运行时异常：这类异常在编译时期就必须被捕获或者声明抛出。它们通常是外部错误，如文件不存在（FileNotFoundException）、类未找到（ClassNotFoundException）等。非运行时异常强制程序员处理这些可能出现的问题，增强了程序的健壮性。</li><li>运行时异常：这类异常包括运行时异常 （RuntimeException）和错误（Error）。运行时异常由程序错误导致，如空指针访问（NullPointerException）、数组越界（ArrayIndexOutOfBoundsException）等。运行时异常是不需要在编译时强制捕获或声明的。<br><img src="https://t.tutu.to/img/l6Vg4" alt="image-d9fb152c5cdf567601589e1bda2419c4.png" loading="lazy"></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">RuntimeException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>}<br> \`\`\`</p><h3 id="类与对象" tabindex="-1"><a class="header-anchor" href="#类与对象"><span>类与对象</span></a></h3><figure><img src="https://t.tutu.to/img/l6Anh" alt="image-18bbdd7d7c4345f3b48026a837b453d7.png" tabindex="0" loading="lazy"><figcaption>image-18bbdd7d7c4345f3b48026a837b453d7.png</figcaption></figure><h4 id="继承与多态" tabindex="-1"><a class="header-anchor" href="#继承与多态"><span>继承与多态</span></a></h4><p><img src="https://t.tutu.to/img/l6Anh" alt="image-18bbdd7d7c4345f3b48026a837b453d7.png" loading="lazy"><br><img src="https://t.tutu.to/img/l6HY6" alt="image-db0b25a81103b06e3926310eb9916e24.png" loading="lazy"><br> 避免重复造轮子，减少代码重复度</p><h4 id="封装与抽象" tabindex="-1"><a class="header-anchor" href="#封装与抽象"><span>封装与抽象</span></a></h4><p><img src="`+n+'" alt="alt text" loading="lazy"><br> 属性设置为private，通过setter和getter来访问和修改（Lombok通过@Data注解可以快速实现）；方法可以用public，因为方法是我们自己控制的</p><h4 id="接口与抽象类" tabindex="-1"><a class="header-anchor" href="#接口与抽象类"><span>接口与抽象类</span></a></h4><p><img src="https://t.tutu.to/img/l6Gc5" alt="image-4f4a6708c021aaeca45c813f0190fb54.png" loading="lazy"><br><img src="https://t.tutu.to/img/l6gRB" alt="image-e82a45f7f0ef2e884b934687e330a1ac.png" loading="lazy"></p><h3 id="java平台" tabindex="-1"><a class="header-anchor" href="#java平台"><span>Java平台</span></a></h3><h4 id="jdk-jre-jvm" tabindex="-1"><a class="header-anchor" href="#jdk-jre-jvm"><span>JDK JRE JVM</span></a></h4><p>JVM是Java虚拟机，是Java程序运行的环境。它负责将Java字节码（由Java编译器生成）解释或编译成机器码，并执行程序。JVM提供了内存管理、垃圾回收、安全性等功能，使得Java程序具备跨平台性。<br> JDK是Java开发工具包，是开发Java程序所需的工具集合。它包含了JVM、编译器（javac）、调试器（jdb）等开发工具，以及一系列的类库（如Java标准库和开发工具库）。JDK提供了开发、编译、调试和运行Java程序所需的全部工具和环境。<br> JRE是Java运行时环境，是Java程序运行所需的最小环境。它包含了JVM和一组Java类库，用于支持Java程序的执行。JRE不包含开发工具，只提供Java程序运行所需的运行环境。</p><h4 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h4><p>启动类加载器（Bootstrap Class Loader）：这是最顶层的类加载器，负责加载Java的核心库（如位于jre/lib/rt.jar中的类），它是用C++编写的，是JVM的一部分。启动类加载器无法被Java程序直接引用。<br> 扩展类加载器（Extension Class Loader）：它是Java语言实现的，继承自ClassLoader类，负责加载Java扩展目录（jre/lib/ext或由系统变量Java.ext.dirs指定的目录）下的jar包和类库。扩展类加载器由启动类加载器加载，并且父加载器就是启动类加载器。<br> 系统类加载器（System Class Loader）/ 应用程序类加载器（Application Class Loader）：这也是Java语言实现的，负责加载用户类路径（ClassPath）上的指定类库，是我们平时编写Java程序时默认使用的类加载器。系统类加载器的父加载器是扩展类加载器。它可以通过ClassLoader.getSystemClassLoader()方法获取到。<br> 自定义类加载器（Custom Class Loader）：开发者可以根据需求定制类的加载方式，比如从网络加载class文件、数据库、甚至是加密的文件中加载类等。自定义类加载器可以用来扩展Java应用程序的灵活性和安全性，是Java动态性的一个重要体现。</p><h4 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h4><ul><li><p>加载：通过类的全限定名（包名 + 类名），获取到该类的.class文件的二进制字节流，将二进制字节流所代表的静态存储结构，转化为方法区运行时的数据结构，在内存中生成一个代表该类的Java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p></li><li><p>连接：验证、准备、解析 3 个阶段统称为连接。</p></li><li><p>验证：确保class文件中的字节流包含的信息，符合当前虚拟机的要求，保证这个被加载的class类的正确性，不会危害到虚拟机的安全。验证阶段大致会完成以下四个阶段的检验动作：文件格式校验、元数据验证、字节码验证、符号引用验证</p></li><li><p>准备：为类中的静态字段分配内存，并设置默认的初始值，比如int类型初始值是0。被final修饰的static字段不会设置，因为final在编译的时候就分配了</p></li><li><p>解析：解析阶段是虚拟机将常量池的「符号引用」直接替换为「直接引用」的过程。符号引用是以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用的时候可以无歧义地定位到目标即可。直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄，直接引用是和虚拟机实现的内存布局相关的。如果有了直接引用， 那引用的目标必定已经存在在内存中了。</p></li><li><p>初始化：初始化是整个类加载过程的最后一个阶段，初始化阶段简单来说就是执行类的构造器方法（() ），要注意的是这里的构造器方法()并不是开发者写的，而是编译器自动生成的。</p></li><li><p>使用：使用类或者创建对象</p></li><li><p>卸载：如果有下面的情况，类就会被卸载：1. 该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。2. 加载该类的ClassLoader已经被回收。 3. 类对应的Java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><h4 id="数组和链表" tabindex="-1"><a class="header-anchor" href="#数组和链表"><span>数组和链表</span></a></h4><h4 id="栈和队列" tabindex="-1"><a class="header-anchor" href="#栈和队列"><span>栈和队列</span></a></h4><h4 id="树" tabindex="-1"><a class="header-anchor" href="#树"><span>树</span></a></h4><h4 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h4><h4 id="常用搜索算法" tabindex="-1"><a class="header-anchor" href="#常用搜索算法"><span>常用搜索算法</span></a></h4><h4 id="集合框架-list-set-map" tabindex="-1"><a class="header-anchor" href="#集合框架-list-set-map"><span>集合框架（List Set Map）</span></a></h4><ul><li>List允许元素重复，有序存储</li><li>Set不允许元素重复，无序存储</li><li>Map存储键值对，键不允许重复，通过键获取值</li></ul><h2 id="_02-开发工具介绍" tabindex="-1"><a class="header-anchor" href="#_02-开发工具介绍"><span>02 开发工具介绍</span></a></h2><h3 id="git工具" tabindex="-1"><a class="header-anchor" href="#git工具"><span>Git工具</span></a></h3><figure><img src="https://t.tutu.to/img/lFa2A" alt="image-df49bcf6c2f2217dc7970ce5b6d78172.png" tabindex="0" loading="lazy"><figcaption>image-df49bcf6c2f2217dc7970ce5b6d78172.png</figcaption></figure><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h4><figure><img src="https://t.tutu.to/img/lFhrP" alt="image-7c917b45b64599dad4fd5f5026f6c40f.png" tabindex="0" loading="lazy"><figcaption>image-7c917b45b64599dad4fd5f5026f6c40f.png</figcaption></figure><h3 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>Maven</span></a></h3><h2 id="_03-编码规范" tabindex="-1"><a class="header-anchor" href="#_03-编码规范"><span>03 编码规范</span></a></h2><h3 id="编码风格" tabindex="-1"><a class="header-anchor" href="#编码风格"><span>编码风格</span></a></h3><h4 id="命名风格" tabindex="-1"><a class="header-anchor" href="#命名风格"><span>命名风格</span></a></h4><p><a href="https://imgse.com/i/pVEAcgH" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEAcgH.png" alt="pVEAcgH.png" loading="lazy"></a><br> Java编码用驼峰，SQL用“_”已经成为默认规范了。命名尽量用英文，少用或不用拼音。<br><a href="https://imgse.com/i/pVEAWDI" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEAWDI.png" alt="pVEAWDI.png" loading="lazy"></a></p><h3 id="注释规范-单行注释、块注释、文档注释" tabindex="-1"><a class="header-anchor" href="#注释规范-单行注释、块注释、文档注释"><span>注释规范（单行注释、块注释、文档注释）</span></a></h3><figure><a href="https://imgse.com/i/pVEA4VP" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEA4VP.png" alt="pVEA4VP.png" tabindex="0" loading="lazy"></a><figcaption>pVEA4VP.png</figcaption></figure><h3 id="代码组织" tabindex="-1"><a class="header-anchor" href="#代码组织"><span>代码组织</span></a></h3><h4 id="类与方法的设计" tabindex="-1"><a class="header-anchor" href="#类与方法的设计"><span>类与方法的设计</span></a></h4><figure><a href="https://imgse.com/i/pVEEUJS" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEEUJS.png" alt="pVEEUJS.png" tabindex="0" loading="lazy"></a><figcaption>pVEEUJS.png</figcaption></figure><h4 id="避免代码重复和过度设计" tabindex="-1"><a class="header-anchor" href="#避免代码重复和过度设计"><span>避免代码重复和过度设计</span></a></h4><figure><a href="https://imgse.com/i/pVEE0Mj" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/16/pVEE0Mj.png" alt="pVEE0Mj.png" tabindex="0" loading="lazy"></a><figcaption>pVEE0Mj.png</figcaption></figure><h2 id="_04-linux基础知识介绍" tabindex="-1"><a class="header-anchor" href="#_04-linux基础知识介绍"><span>04 Linux基础知识介绍</span></a></h2><p>当前最主流的服务器操作系统还是Linux，项目的部署、运维等都要用到Linux（运维干的事后端开发来干！！？？老板让你干啥你就得干啥，身兼数职促进你成长[doge]）</p><h3 id="linux概述" tabindex="-1"><a class="header-anchor" href="#linux概述"><span>Linux概述</span></a></h3><h4 id="linux是什么" tabindex="-1"><a class="header-anchor" href="#linux是什么"><span>Linux是什么</span></a></h4><p>一个开源的操作系统内核，最初由Linus Torvalds开发。它是基于Unix系统的设计，提供稳定和安全的环境。作为开源软件，Linux允许用户自由使用】修改和分发。</p><h4 id="linux历史" tabindex="-1"><a class="header-anchor" href="#linux历史"><span>Linux历史</span></a></h4><p>看了也记不住，也不用记住，想了解的自己去搜搜看吧。</p><h4 id="linux的特点和优势" tabindex="-1"><a class="header-anchor" href="#linux的特点和优势"><span>Linux的特点和优势</span></a></h4><ul><li>开源免费</li><li>安全可靠</li><li>性能好和稳定（Windows半年不关机你试试[doge]）</li><li>多用户和多任务</li><li>一切皆文件</li></ul><h3 id="linux基本命令" tabindex="-1"><a class="header-anchor" href="#linux基本命令"><span>linux基本命令</span></a></h3><h4 id="机器性能查询" tabindex="-1"><a class="header-anchor" href="#机器性能查询"><span>机器性能查询</span></a></h4><figure><img src="https://t.tutu.to/img/lFfir" alt="image-375cb76c08b5b5f1fc37367338f027cc.png" tabindex="0" loading="lazy"><figcaption>image-375cb76c08b5b5f1fc37367338f027cc.png</figcaption></figure><h2 id="_05-典型业务架构" tabindex="-1"><a class="header-anchor" href="#_05-典型业务架构"><span>05 典型业务架构</span></a></h2><h3 id="web网站" tabindex="-1"><a class="header-anchor" href="#web网站"><span>Web网站</span></a></h3><figure><img src="https://t.tutu.to/img/lFM6B" alt="image-a2a8292610217c0dccac9442f4461f09.png" tabindex="0" loading="lazy"><figcaption>image-a2a8292610217c0dccac9442f4461f09.png</figcaption></figure><h3 id="物联网" tabindex="-1"><a class="header-anchor" href="#物联网"><span>物联网</span></a></h3><figure><img src="https://t.tutu.to/img/lFeMd" alt="image-fd13f5d2fd4c31d5958695083eb0d056.png" tabindex="0" loading="lazy"><figcaption>image-fd13f5d2fd4c31d5958695083eb0d056.png</figcaption></figure>',83)]))}const c=t(p,[["render",r]]),o=JSON.parse('{"path":"/posts/xiaomi/Day1Java%E5%9F%BA%E7%A1%80.html","title":"Day1   Java基础","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-16T00:00:00.000Z","category":"-小米训练营","tag":"-Java -SE","description":"Day1 Java基础 pVE9mct.png 老师默认我们了解Java的相关知识，今天学习的主要内容是JavaSE的复习。 01 Java基础简介 Java历史 pVE9tcq.pngpVE9tcq.png Java语言特点 pVE9wHU.pngpVE9wHU.png 强类型语言？？？ （程序跑起来之后里面每一个类型都是确定的） 静态类型检查：在程...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day1   Java基础\\",\\"image\\":[\\"https://s21.ax1x.com/2025/06/16/pVE9mct.png\\",\\"https://s21.ax1x.com/2025/06/16/pVE9tcq.png\\",\\"https://s21.ax1x.com/2025/06/16/pVE9wHU.png\\",\\"https://s21.ax1x.com/2025/06/16/pVE9fHO.png\\",\\"https://s21.ax1x.com/2025/06/16/pVE9Xb8.png\\",\\"https://s21.ax1x.com/2025/06/16/pVECpCj.png\\",\\"https://s21.ax1x.com/2025/06/16/pVECFK0.png\\",\\"https://s21.ax1x.com/2025/06/16/pVECAbT.png\\",\\"https://s21.ax1x.com/2025/06/16/pVECnPJ.png\\",\\"https://s21.ax1x.com/2025/06/16/pVEChMq.png\\",\\"https://s21.ax1x.com/2025/06/16/pVEC4s0.png\\",\\"https://t.tutu.to/img/l6s8S\\",\\"https://t.tutu.to/img/l6Vg4\\",\\"https://t.tutu.to/img/l6Anh\\",\\"https://t.tutu.to/img/l6Anh\\",\\"https://t.tutu.to/img/l6HY6\\",\\"https://t.tutu.to/img/l6Gc5\\",\\"https://t.tutu.to/img/l6gRB\\",\\"https://t.tutu.to/img/lFa2A\\",\\"https://t.tutu.to/img/lFhrP\\",\\"https://s21.ax1x.com/2025/06/16/pVEAcgH.png\\",\\"https://s21.ax1x.com/2025/06/16/pVEAWDI.png\\",\\"https://s21.ax1x.com/2025/06/16/pVEA4VP.png\\",\\"https://s21.ax1x.com/2025/06/16/pVEEUJS.png\\",\\"https://s21.ax1x.com/2025/06/16/pVEE0Mj.png\\",\\"https://t.tutu.to/img/lFfir\\",\\"https://t.tutu.to/img/lFM6B\\",\\"https://t.tutu.to/img/lFeMd\\"],\\"datePublished\\":\\"2025-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-16T10:48:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/xiaomi/Day1Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"Day1   Java基础"}],["meta",{"property":"og:description","content":"Day1 Java基础 pVE9mct.png 老师默认我们了解Java的相关知识，今天学习的主要内容是JavaSE的复习。 01 Java基础简介 Java历史 pVE9tcq.pngpVE9tcq.png Java语言特点 pVE9wHU.pngpVE9wHU.png 强类型语言？？？ （程序跑起来之后里面每一个类型都是确定的） 静态类型检查：在程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s21.ax1x.com/2025/06/16/pVE9mct.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-16T10:48:41.000Z"}],["meta",{"property":"article:tag","content":"-Java -SE"}],["meta",{"property":"article:published_time","content":"2025-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-16T10:48:41.000Z"}]]},"git":{"createdTime":1750043878000,"updatedTime":1750070921000,"contributors":[{"name":"Jing104","username":"Jing104","email":"2046485376@qq.com","commits":1,"url":"https://github.com/Jing104"},{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1}]},"readingTime":{"minutes":9.74,"words":2921},"filePathRelative":"posts/xiaomi/Day1Java基础.md","excerpt":"\\n<p><a href=\\"https://imgse.com/i/pVE9mct\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://s21.ax1x.com/2025/06/16/pVE9mct.png\\" alt=\\"pVE9mct.png\\" loading=\\"lazy\\"></a><br>\\n老师默认我们了解Java的相关知识，今天学习的主要内容是JavaSE的复习。</p>\\n<h2>01 Java基础简介</h2>\\n<h3>Java历史</h3>\\n<figure><a href=\\"https://imgse.com/i/pVE9tcq\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://s21.ax1x.com/2025/06/16/pVE9tcq.png\\" alt=\\"pVE9tcq.png\\" tabindex=\\"0\\" loading=\\"lazy\\"></a><figcaption>pVE9tcq.png</figcaption></figure>","autoDesc":true}');export{c as comp,o as data};
