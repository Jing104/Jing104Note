import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as i,o as s}from"./app-CC6qkQ8f.js";const n={};function r(p,a){return s(),e("div",null,a[0]||(a[0]=[i(`<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>Java基础</span></a></h1><h2 id="此部分学习时还未建立该笔记网站-后续将会补充" tabindex="-1"><a class="header-anchor" href="#此部分学习时还未建立该笔记网站-后续将会补充"><span>此部分学习时还未建立该笔记网站，后续将会补充</span></a></h2><p>最近做了几个java后端开发的笔试题，发现自己还是太蠢了，其实很多JavaSE的内容都不会，赶快来记录学习一下。</p><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符：</span></a></h2><p><a href="https://imgse.com/i/pEzm0Qf" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/05/22/pEzm0Qf.png" alt="pEzm0Qf.png" loading="lazy"></a><br> private一般修饰成员变量、成员方法、构造方法，只能本类内部访问<br> default（或者不写权限修饰符默认的），一般修饰成员变量、成员方法、构造方法，本类以及同包下类能够访问<br> protected一般修饰成员变量、成员方法、构造方法，本类、同一包中的类、子类能够访问<br> public一般修饰类、成员变量、成员方法、构造方法，以上所有情况以及不同包下的类都能够访问</p><h1 id="preparedstatement与statement" tabindex="-1"><a class="header-anchor" href="#preparedstatement与statement"><span>PreparedStatement与Statement</span></a></h1><p>这俩东西我更是之前听都没听过，现在应用开发大多都是SSM架构，Mybatis框架真的让一些数据库操作变得无比简单，老旧的JDBC都很少见了，这两个就是关于JDBC的两个接口</p><table><thead><tr><th>项目</th><th>Statement</th><th>PreparedStatement</th><th>CallableStatement</th><th>Wrapper</th></tr></thead><tbody><tr><td>基础接口</td><td>Statement</td><td>PreparedStatement 继承 Statement</td><td>CallableStatement 继承 PreparedStatement</td><td>所有 JDBC 接口都实现了 Wrapper</td></tr><tr><td>SQL 类型</td><td>静态 SQL</td><td>参数化 SQL</td><td>存储过程</td><td>不执行 SQL，仅用于包装查询</td></tr><tr><td>性能</td><td>最低</td><td>高</td><td>高</td><td>N/A</td></tr><tr><td>安全性（防注入）</td><td>差</td><td>好</td><td>好</td><td>N/A</td></tr><tr><td>使用难度</td><td>简单</td><td>中等</td><td>稍高</td><td>主要用于驱动开发或高级场景</td></tr></tbody></table><h2 id="类方法和this" tabindex="-1"><a class="header-anchor" href="#类方法和this"><span>类方法和this</span></a></h2><p>类方法（static修饰的方法）的主要特点是属于类本身而不是对象实例,因此:</p><ol><li>不能使用this关键字</li><li>可以直接调用同类其他类方法</li><li>可以访问类变量</li><li>可以通过对象实例调用实例方法</li></ol><p><strong>类中调用实例方法是否要用 this？</strong><br> 只有在实例方法中才能使用 this 来调用另一个实例方法或变量。</p><p>this 表示当前对象的引用，只能在非静态（实例）方法中使用。<br> 在一个实例方法中调用另一个实例方法或访问实例变量时，可以用 this（可省略）。<br> 在类方法（static 方法）中是不能使用 this 的，因为没有具体的对象实例供它引用。<br><strong>总结</strong><br> this 只能在实例方法中使用；<br> 实例方法调用另一个实例方法可以使用 this（但不是必须）；<br> 静态方法不能访问非静态成员，除非通过对象引用；<br> 静态方法不能使用 this。</p><h2 id="java中方法的书写" tabindex="-1"><a class="header-anchor" href="#java中方法的书写"><span>Java中方法的书写</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> constInt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     //add code here</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;public abstract void method(int a);&quot;是正确的,因为:</p><ol><li>在抽象类中可以定义抽象方法</li><li>抽象方法的语法格式正确:使用abstract修饰符,没有方法体,以分号结束</li><li>参数列表和返回值类型的定义也符合Java语法规则</li></ol><p>&quot;constInt = constInt + 5;&quot;错误:</p><ul><li>这是一个<em>语句</em>而不是<em>成员定义</em></li><li>类体中只能包含成员定义,不能直接写执行语句</li></ul><p>&quot;public int method();&quot;错误:</p><ul><li>这个方法声明与已有的method()方法冲突</li><li>Java<em>不支持仅通过返回值类型</em>来区分重载方法，但是入参和返回类型一起修改是可以的</li></ul><p>&quot;public abstract void anotherMethod() {}&quot;错误:</p><ul><li><em>抽象方法不能有方法体</em></li><li>这里错误地为抽象方法添加了空的方法体{}</li><li>正确的抽象方法声明应该以分号结束而不是大括号</li></ul><h2 id="文件处理相关" tabindex="-1"><a class="header-anchor" href="#文件处理相关"><span>文件处理相关</span></a></h2><p>在Java中，所有文件在底层都是以<em>字节形式</em>存储的，因此无论是文本文件还是二进制文件，都可以当作二进制文件来处理。这也是为什么Java提供了统一的字节流类（如FileInputStream和FileOutputStream）来处理所有类型的文件。<br> File类是用于表示文件和目录路径名的类，它只能用于获取文件信息、创建或删除文件，而不能直接进行文件的读写操作。文件的读写需要使用IO流相关的类。</p><h2 id="重载和重写" tabindex="-1"><a class="header-anchor" href="#重载和重写"><span>重载和重写</span></a></h2><h3 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h3><p>方法重载（Overloading） 是在同一个类中定义多个方法名相同、参数列表不同的方法。<em>仅改变返回类型而参数完全相同是不能构成重载的</em>。</p><h3 id="重写" tabindex="-1"><a class="header-anchor" href="#重写"><span>重写</span></a></h3><p>重写要求方法名、参数列表完全相同，但返回类型可以是父类方法返回类型的子类（协变返回类型）。例如：<br> class Animal { Animal get() { ... } }<br> class Dog extends Animal { Dog get() { ... } } // 合法重写</p><p><strong>private</strong>方法是类私有，子类不可见，因此<strong>无法重写</strong>。子类中定义的同名方法仅是独立的新方法，与父类无关。</p><h3 id="接口和类" tabindex="-1"><a class="header-anchor" href="#接口和类"><span>接口和类</span></a></h3><p>在 Java 中，接口（interface）确实可以使用 extends 关键字继承一个或多个其他接口。这与类只能继承一个父类不同，接口之间是支持多继承的。这种机制允许将多个接口的契约（方法声明）组合到一个新的接口中。<br> 若要实现一个接口为普通类则必须实现接口的所有抽象方法。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="gui" tabindex="-1"><a class="header-anchor" href="#gui"><span>GUI</span></a></h3><p>Java基本的GUI(图形用户界面)设计主要依赖java.awt包,该包提供了创建用户界面和绘制图形图像的所有基本组件。java.awt(Abstract Window Toolkit)是Java最基础的GUI工具包,包含了基本的GUI组件如Button、Label、TextField等。</p><h3 id="java-标识符-变量名" tabindex="-1"><a class="header-anchor" href="#java-标识符-变量名"><span>Java 标识符（变量名）</span></a></h3><p>Java标识符的命名规则:</p><ol><li>可以由字母、数字、下划线(_)和美元符号($)组成</li><li>不能以数字开头</li><li>不能是Java关键字和保留字</li><li>区分大小写</li><li>不能包含空格和其他特殊字符<br> Java和C++一样具有继承封装多态的特性</li></ol>`,40)]))}const d=t(n,[["render",r]]),o=JSON.parse('{"path":"/posts/interview/Java%E5%9F%BA%E7%A1%80.html","title":"Java基础","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","category":["Java"],"tag":["Java基础"],"description":"Java基础 此部分学习时还未建立该笔记网站，后续将会补充 最近做了几个java后端开发的笔试题，发现自己还是太蠢了，其实很多JavaSE的内容都不会，赶快来记录学习一下。 修饰符： pEzm0Qf.png private一般修饰成员变量、成员方法、构造方法，只能本类内部访问 default（或者不写权限修饰符默认的），一般修饰成员变量、成员方法、构造...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"https://s21.ax1x.com/2025/05/22/pEzm0Qf.png\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-27T11:22:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/interview/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"Java基础 此部分学习时还未建立该笔记网站，后续将会补充 最近做了几个java后端开发的笔试题，发现自己还是太蠢了，其实很多JavaSE的内容都不会，赶快来记录学习一下。 修饰符： pEzm0Qf.png private一般修饰成员变量、成员方法、构造方法，只能本类内部访问 default（或者不写权限修饰符默认的），一般修饰成员变量、成员方法、构造..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s21.ax1x.com/2025/05/22/pEzm0Qf.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-27T11:22:55.000Z"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-27T11:22:55.000Z"}]]},"git":{"createdTime":1745374833000,"updatedTime":1748344975000,"contributors":[{"name":"Jing104","username":"Jing104","email":"2046485376@qq.com","commits":5,"url":"https://github.com/Jing104"}]},"readingTime":{"minutes":4.98,"words":1493},"filePathRelative":"posts/interview/Java基础.md","excerpt":"\\n<h2>此部分学习时还未建立该笔记网站，后续将会补充</h2>\\n<p>最近做了几个java后端开发的笔试题，发现自己还是太蠢了，其实很多JavaSE的内容都不会，赶快来记录学习一下。</p>\\n<h2>修饰符：</h2>\\n<p><a href=\\"https://imgse.com/i/pEzm0Qf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://s21.ax1x.com/2025/05/22/pEzm0Qf.png\\" alt=\\"pEzm0Qf.png\\" loading=\\"lazy\\"></a><br>\\nprivate一般修饰成员变量、成员方法、构造方法，只能本类内部访问<br>\\ndefault（或者不写权限修饰符默认的），一般修饰成员变量、成员方法、构造方法，本类以及同包下类能够访问<br>\\nprotected一般修饰成员变量、成员方法、构造方法，本类、同一包中的类、子类能够访问<br>\\npublic一般修饰类、成员变量、成员方法、构造方法，以上所有情况以及不同包下的类都能够访问</p>","autoDesc":true}');export{d as comp,o as data};
