import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as r}from"./app-CfT_By_o.js";const o={};function c(n,t){return r(),e("div",null,t[0]||(t[0]=[a('<h1 id="java集合" tabindex="-1"><a class="header-anchor" href="#java集合"><span>Java集合</span></a></h1><p>Java 集合框架提供了丰富的数据结构用于存储和操作数据。常用集合可以分为以下几类：</p><hr><h2 id="一、collection-接口体系-单值集合" tabindex="-1"><a class="header-anchor" href="#一、collection-接口体系-单值集合"><span>一、Collection 接口体系（单值集合）</span></a></h2><h3 id="_1-list-有序、可重复" tabindex="-1"><a class="header-anchor" href="#_1-list-有序、可重复"><span>1. List（有序、可重复）</span></a></h3><table><thead><tr><th>实现类</th><th>特点</th><th>是否线程安全</th></tr></thead><tbody><tr><td><code>ArrayList</code></td><td>底层数组结构，随机访问快，插入/删除慢</td><td>否</td></tr><tr><td><code>LinkedList</code></td><td>底层双向链表，插入/删除快，随机访问慢</td><td>否</td></tr><tr><td><code>Vector</code></td><td>与 ArrayList 类似，但线程安全（同步）</td><td>是</td></tr><tr><td><code>Stack</code></td><td>LIFO 栈结构，继承自 Vector</td><td>是</td></tr></tbody></table><h3 id="_2-set-无重复元素" tabindex="-1"><a class="header-anchor" href="#_2-set-无重复元素"><span>2. Set（无重复元素）</span></a></h3><table><thead><tr><th>实现类</th><th>特点</th><th>是否有序</th><th>是否线程安全</th></tr></thead><tbody><tr><td><code>HashSet</code></td><td>基于 <code>HashMap</code>，不保证顺序</td><td>否</td><td>否</td></tr><tr><td><code>LinkedHashSet</code></td><td>基于 <code>LinkedHashMap</code>，按插入顺序排序</td><td>是</td><td>否</td></tr><tr><td><code>TreeSet</code></td><td>基于红黑树，自动排序（可指定排序规则）</td><td>是</td><td>否</td></tr><tr><td><code>CopyOnWriteArraySet</code></td><td>线程安全，适用于读多写少</td><td>是</td><td>是</td></tr></tbody></table><h3 id="_3-queue-队列" tabindex="-1"><a class="header-anchor" href="#_3-queue-队列"><span>3. Queue（队列）</span></a></h3><table><thead><tr><th>实现类</th><th>特点</th><th>用途</th></tr></thead><tbody><tr><td><code>LinkedList</code></td><td>也实现了 Queue 接口，可做队列/双端队列</td><td>通用队列</td></tr><tr><td><code>PriorityQueue</code></td><td>优先级队列，自动根据优先级排序</td><td>任务调度</td></tr><tr><td><code>ArrayDeque</code></td><td>双端队列，性能优于 Stack/LinkedList</td><td>栈、队列</td></tr></tbody></table><hr><h2 id="二、map-接口体系-键值对集合" tabindex="-1"><a class="header-anchor" href="#二、map-接口体系-键值对集合"><span>二、Map 接口体系（键值对集合）</span></a></h2><table><thead><tr><th>实现类</th><th>特点</th><th>是否有序</th><th>是否线程安全</th></tr></thead><tbody><tr><td><code>HashMap</code></td><td>基于哈希表，键不能重复，允许 null，性能好</td><td>否</td><td>否</td></tr><tr><td><code>LinkedHashMap</code></td><td>维护插入顺序，适合需要顺序访问的场景</td><td>是</td><td>否</td></tr><tr><td><code>TreeMap</code></td><td>基于红黑树，按 Key 排序，支持范围查找</td><td>是</td><td>否</td></tr><tr><td><code>Hashtable</code></td><td>早期线程安全实现，效率低</td><td>否</td><td>是</td></tr><tr><td><code>ConcurrentHashMap</code></td><td>分段锁设计，线程安全，高并发</td><td>否</td><td>是</td></tr><tr><td><code>ConcurrentSkipListMap</code></td><td>基于跳表，有序，支持并发，适合区间检索/延迟队列等场景</td><td>是</td><td>是</td></tr><tr><td><code>WeakHashMap</code></td><td>Key 为弱引用，适合做缓存</td><td>否</td><td>否</td></tr><tr><td><code>IdentityHashMap</code></td><td>使用 == 判断 Key 是否相等</td><td>否</td><td>否</td></tr><tr><td><code>EnumMap</code></td><td>专门为枚举类型 Key 设计，内部为数组实现</td><td>是</td><td>否</td></tr></tbody></table><hr><h2 id="三、集合工具类" tabindex="-1"><a class="header-anchor" href="#三、集合工具类"><span>三、集合工具类</span></a></h2><table><thead><tr><th>工具类</th><th>功能简介</th></tr></thead><tbody><tr><td><code>Collections</code></td><td>提供排序、同步包装、常用操作的工具方法</td></tr><tr><td><code>Arrays</code></td><td>针对数组的静态工具类</td></tr><tr><td><code>Collectors</code></td><td>Java 8 中用于将流收集为集合的工具类</td></tr></tbody></table><hr><h2 id="四、线程安全集合推荐" tabindex="-1"><a class="header-anchor" href="#四、线程安全集合推荐"><span>四、线程安全集合推荐</span></a></h2><table><thead><tr><th>需求</th><th>推荐集合</th></tr></thead><tbody><tr><td>并发 Map（无序）</td><td><code>ConcurrentHashMap</code></td></tr><tr><td>并发 Map（有序）</td><td><code>ConcurrentSkipListMap</code></td></tr><tr><td>并发 List（读多写少）</td><td><code>CopyOnWriteArrayList</code></td></tr><tr><td>并发 Set（读多写少）</td><td><code>CopyOnWriteArraySet</code></td></tr><tr><td>并发队列</td><td><code>ConcurrentLinkedQueue</code></td></tr><tr><td>延迟任务调度/定时队列</td><td><code>DelayQueue</code>, <code>ScheduledExecutorService</code></td></tr></tbody></table><hr><h2 id="五、选择建议总结" tabindex="-1"><a class="header-anchor" href="#五、选择建议总结"><span>五、选择建议总结</span></a></h2><table><thead><tr><th>需求</th><th>推荐集合</th></tr></thead><tbody><tr><td>快速查找，无顺序，无重复</td><td><code>HashSet</code></td></tr><tr><td>有插入顺序，唯一性</td><td><code>LinkedHashSet</code></td></tr><tr><td>自动排序，无重复元素</td><td><code>TreeSet</code></td></tr><tr><td>动态数组结构，随机访问快</td><td><code>ArrayList</code></td></tr><tr><td>经常增删元素</td><td><code>LinkedList</code></td></tr><tr><td>线程安全的 map</td><td><code>ConcurrentHashMap</code></td></tr><tr><td>可排序且线程安全的 map</td><td><code>ConcurrentSkipListMap</code></td></tr></tbody></table><hr><p>提示：</p><ul><li>List 和 Set 都继承自 Collection。</li><li>Map 不属于 Collection 接口体系。</li><li>如果你在多线程中使用非线程安全的集合，可以用 <code>Collections.synchronizedXXX()</code> 包装。</li></ul><hr>',26)]))}const s=d(o,[["render",c]]),p=JSON.parse('{"path":"/posts/interview/Java%E9%9B%86%E5%90%88.html","title":"Java集合","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","category":["八股"],"tag":["Java集合"],"star":true,"description":"Java集合 Java 集合框架提供了丰富的数据结构用于存储和操作数据。常用集合可以分为以下几类： 一、Collection 接口体系（单值集合） 1. List（有序、可重复） 2. Set（无重复元素） 3. Queue（队列） 二、Map 接口体系（键值对集合） 三、集合工具类 四、线程安全集合推荐 五、选择建议总结 提示： List 和 Set...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-24T11:17:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/interview/Java%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"Java集合"}],["meta",{"property":"og:description","content":"Java集合 Java 集合框架提供了丰富的数据结构用于存储和操作数据。常用集合可以分为以下几类： 一、Collection 接口体系（单值集合） 1. List（有序、可重复） 2. Set（无重复元素） 3. Queue（队列） 二、Map 接口体系（键值对集合） 三、集合工具类 四、线程安全集合推荐 五、选择建议总结 提示： List 和 Set..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-24T11:17:29.000Z"}],["meta",{"property":"article:tag","content":"Java集合"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-24T11:17:29.000Z"}]]},"git":{"createdTime":1745374833000,"updatedTime":1753355849000,"contributors":[{"name":"Jing104","username":"Jing104","email":"2046485376@qq.com","commits":3,"url":"https://github.com/Jing104"},{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1},{"name":"YuZhaojing","username":"YuZhaojing","email":"zhaojing.yu@raysense.com","commits":1,"url":"https://github.com/YuZhaojing"}]},"readingTime":{"minutes":2.38,"words":715},"filePathRelative":"posts/interview/Java集合.md","excerpt":"\\n<p>Java 集合框架提供了丰富的数据结构用于存储和操作数据。常用集合可以分为以下几类：</p>\\n<hr>\\n<h2>一、Collection 接口体系（单值集合）</h2>\\n<h3>1. List（有序、可重复）</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>实现类</th>\\n<th>特点</th>\\n<th>是否线程安全</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>ArrayList</code></td>\\n<td>底层数组结构，随机访问快，插入/删除慢</td>\\n<td>否</td>\\n</tr>\\n<tr>\\n<td><code>LinkedList</code></td>\\n<td>底层双向链表，插入/删除快，随机访问慢</td>\\n<td>否</td>\\n</tr>\\n<tr>\\n<td><code>Vector</code></td>\\n<td>与 ArrayList 类似，但线程安全（同步）</td>\\n<td>是</td>\\n</tr>\\n<tr>\\n<td><code>Stack</code></td>\\n<td>LIFO 栈结构，继承自 Vector</td>\\n<td>是</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{s as comp,p as data};
