import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as s}from"./app-DfgMe5bT.js";const n={};function p(l,i){return s(),a("div",null,i[0]||(i[0]=[e(`<h1 id="记录所学新知识小点" tabindex="-1"><a class="header-anchor" href="#记录所学新知识小点"><span>记录所学新知识小点</span></a></h1><h2 id="封装方法" tabindex="-1"><a class="header-anchor" href="#封装方法"><span>封装方法</span></a></h2><h3 id="tip1" tabindex="-1"><a class="header-anchor" href="#tip1"><span>tip1</span></a></h3><ul><li>将DTO中的属性值赋给Entity可以用SpringBoot中封装的Bean工具类的方法，BeanUtils.copyProperties(XXDTO,XX)。</li></ul><h3 id="tip2" tabindex="-1"><a class="header-anchor" href="#tip2"><span>tip2</span></a></h3><ul><li>之前学SpringBoot项目，用的加密方法是MD5，用的是一个自定义的MD5加密工具类，实际上SpringBoot给我们封装了加密工具类，叫做DigestUtils，里面只有md5加密方法（传参是 字符串的getBytes），想要多种加密方法，可以使用apach的DigestUtils。</li></ul><table><thead><tr><th>功能/类</th><th>Spring 自带 (<code>org.springframework.util.DigestUtils</code>)</th><th>Apache Commons (<code>org.apache.commons.codec.digest.DigestUtils</code>)</th></tr></thead><tbody><tr><td>是否默认包含</td><td>Spring Boot 默认包含</td><td>需要添加依赖</td></tr><tr><td>支持算法</td><td>仅支持 MD5</td><td>支持多种：MD2 / MD5 / SHA-1 / SHA-256 / SHA-384 / SHA-512</td></tr><tr><td>推荐场景</td><td>适合快速做 MD5 简单哈希</td><td>适用于需要更强加密或与其他系统对接的复杂加密需求</td></tr></tbody></table><p>添加依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;commons-codec&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;commons-codec&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;1.15&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 或最新版本 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tip3" tabindex="-1"><a class="header-anchor" href="#tip3"><span>tip3</span></a></h3><ul><li>分页查询，不使用mybatis的话，要自己计算所拿的数据（第几页，几条），可以使用pageHelper来快速实现，基于ThreadLocal实现</li></ul><h2 id="编码技巧" tabindex="-1"><a class="header-anchor" href="#编码技巧"><span>编码技巧</span></a></h2><h3 id="tip1-1" tabindex="-1"><a class="header-anchor" href="#tip1-1"><span>tip1</span></a></h3><ul><li>实际代码过程中，尽量不要用1，0等数字魔法值，这样属于硬编码，不易于维护，使用属性常量（设一个常量类）更好</li></ul><h3 id="tip2-1" tabindex="-1"><a class="header-anchor" href="#tip2-1"><span>tip2</span></a></h3><ul><li>建议落库的时候还是在编码的时候用LocalTime来set时间，一定要注意时间类的一些问题，时差等等</li></ul><h3 id="tip3-1" tabindex="-1"><a class="header-anchor" href="#tip3-1"><span>tip3</span></a></h3><ul><li>格式化一些数据的时候建议扩展SpringMVC的消息转换器。继承WebMvcConfigurationSupport，重写extendMessageConvert方法</li></ul><h3 id="tip4" tabindex="-1"><a class="header-anchor" href="#tip4"><span>tip4</span></a></h3><ul><li>路径参数{}要用@PathVariable注解修饰，json请求参数，要用@RequestBody，Query参数只要能对应就行</li></ul><h3 id="tip5" tabindex="-1"><a class="header-anchor" href="#tip5"><span>tip5</span></a></h3><ul><li>构建对象除了new之后set值，还可以在对象类上加上@Builder注解，使用build构造对象</li></ul><h3 id="tip6" tabindex="-1"><a class="header-anchor" href="#tip6"><span>tip6</span></a></h3><ul><li>公共字段：比如创建时间、创建人，更改时间、更改人等，每次创建更改操作都要set一次，代码冗余。可以通过切面来处理--AOP，统一拦截mapper层，为这些公共字段赋值。</li></ul><h2 id="测试技巧" tabindex="-1"><a class="header-anchor" href="#测试技巧"><span>测试技巧</span></a></h2><h3 id="tip1-2" tabindex="-1"><a class="header-anchor" href="#tip1-2"><span>tip1</span></a></h3><ul><li>可以使用Swagger、apifox、postman等等，都差不多，注意请求头的设置</li></ul>`,27)]))}const d=t(n,[["render",p]]),o=JSON.parse('{"path":"/posts/BiliBiliStudy/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96.html","title":"记录所学新知识小点","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-05T00:00:00.000Z","category":["BiliBli网课"],"tag":["黑马","苍穹外卖"],"description":"记录所学新知识小点 封装方法 tip1 将DTO中的属性值赋给Entity可以用SpringBoot中封装的Bean工具类的方法，BeanUtils.copyProperties(XXDTO,XX)。 tip2 之前学SpringBoot项目，用的加密方法是MD5，用的是一个自定义的MD5加密工具类，实际上SpringBoot给我们封装了加密工具类，叫...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"记录所学新知识小点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-11T12:15:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/BiliBiliStudy/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"记录所学新知识小点"}],["meta",{"property":"og:description","content":"记录所学新知识小点 封装方法 tip1 将DTO中的属性值赋给Entity可以用SpringBoot中封装的Bean工具类的方法，BeanUtils.copyProperties(XXDTO,XX)。 tip2 之前学SpringBoot项目，用的加密方法是MD5，用的是一个自定义的MD5加密工具类，实际上SpringBoot给我们封装了加密工具类，叫..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-11T12:15:47.000Z"}],["meta",{"property":"article:tag","content":"苍穹外卖"}],["meta",{"property":"article:tag","content":"黑马"}],["meta",{"property":"article:published_time","content":"2025-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-11T12:15:47.000Z"}]]},"git":{"createdTime":1752236147000,"updatedTime":1752236147000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1}]},"readingTime":{"minutes":1.9,"words":571},"filePathRelative":"posts/BiliBiliStudy/苍穹外卖.md","excerpt":"\\n<h2>封装方法</h2>\\n<h3>tip1</h3>\\n<ul>\\n<li>将DTO中的属性值赋给Entity可以用SpringBoot中封装的Bean工具类的方法，BeanUtils.copyProperties(XXDTO,XX)。</li>\\n</ul>\\n<h3>tip2</h3>\\n<ul>\\n<li>之前学SpringBoot项目，用的加密方法是MD5，用的是一个自定义的MD5加密工具类，实际上SpringBoot给我们封装了加密工具类，叫做DigestUtils，里面只有md5加密方法（传参是 字符串的getBytes），想要多种加密方法，可以使用apach的DigestUtils。</li>\\n</ul>","autoDesc":true}');export{d as comp,o as data};
