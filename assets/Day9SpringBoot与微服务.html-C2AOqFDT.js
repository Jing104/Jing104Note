import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as t,o as e}from"./app-dKYPaGUe.js";const o={};function r(p,a){return e(),i("div",null,a[0]||(a[0]=[t('<h1 id="springboot与微服务" tabindex="-1"><a class="header-anchor" href="#springboot与微服务"><span>SpringBoot与微服务</span></a></h1><h2 id="springboot整体概述" tabindex="-1"><a class="header-anchor" href="#springboot整体概述"><span>SpringBoot整体概述</span></a></h2><p><strong>SpringBoot核心特性</strong></p><ul><li>约定大于配置</li><li>场景启动器-starter</li><li>自动装配</li><li>嵌入式Web容器</li><li>生产级别的特性<br><strong>三种启动方式</strong></li><li>网页启动-SpringBootInitializer-目前只支持JDK17以上</li><li>IDE创建-现在也只支持JDK17</li><li>Maven自己创建SpringBoot项目才能支持JDK8了</li></ul><h3 id="组建的装配" tabindex="-1"><a class="header-anchor" href="#组建的装配"><span>组建的装配</span></a></h3><ul><li>手动装配：基于XML的手动装配；基于注解配置类的手动装配；基于扫描的手动装配</li><li>自动装配：核心就是本应该有开发者编写的配置，转为框架自动跟据项目中整合的场景依赖，合理地做出判断并装配合适的Bean到IOC容器中；依赖于模块装配（@Import，@Enable*）和条件装配（Profile，@Conditional*）</li></ul><h4 id="模块装配" tabindex="-1"><a class="header-anchor" href="#模块装配"><span>模块装配</span></a></h4><p><strong>@Import注解</strong></p><ul><li>模块化配置：将不同功能模块的配置分散到独立的配置类，通过@Import整合</li><li>复用性提升：对于通用的配置类，可在多个项目或者模块中重复使用@Import引入</li><li>减少样板代码：无需逐个手动注册Bean，提高配置效率<br><strong>@EnableXXX</strong><br> 比如EnableTransactional</li></ul><h4 id="条件装配" tabindex="-1"><a class="header-anchor" href="#条件装配"><span>条件装配</span></a></h4><p><strong>Profile</strong>：配置类中加注解然后再application配置文件里配置<br><strong>ConditionOnXXX</strong></p><h3 id="spi机制-service-provider-interface" tabindex="-1"><a class="header-anchor" href="#spi机制-service-provider-interface"><span>SPI机制（Service Provider Interface）</span></a></h3><ul><li>1.定义服务接口</li><li>2.实现服务接口</li><li>3.配置服务实现</li><li>4.服务实现与加载<br><strong>显著应用JDBC</strong></li></ul><h4 id="springframework-spi" tabindex="-1"><a class="header-anchor" href="#springframework-spi"><span>SpringFramework SPI</span></a></h4><p>不仅仅局限于接口，可以是任何一个类、接口、注解</p><h4 id="springapplication注解" tabindex="-1"><a class="header-anchor" href="#springapplication注解"><span>@SpringApplication注解</span></a></h4><p>不配置扫描包路径的话，只会扫描同类级的包和子包</p><h4 id="webmvcautoconfiguration" tabindex="-1"><a class="header-anchor" href="#webmvcautoconfiguration"><span>WebMvcAutoConfiguration</span></a></h4><h3 id="sringboot的容器" tabindex="-1"><a class="header-anchor" href="#sringboot的容器"><span>SringBoot的容器</span></a></h3><h4 id="beanfactory与applicationcontext体系" tabindex="-1"><a class="header-anchor" href="#beanfactory与applicationcontext体系"><span>BeanFactory与ApplicationContext体系</span></a></h4><p>**BeanFactory体系：**最底层，只支持Bean的管理<br> **ApplicationContext：**功能更强，还支持生命周期管理等</p><h4 id="springboot对ioc的扩展" tabindex="-1"><a class="header-anchor" href="#springboot对ioc的扩展"><span>SpringBoot对IoC的扩展</span></a></h4><ul><li>WebServerApplicationContext：支持嵌入式web</li><li>AnnotationConfigServletWebServerApplicationContext：基于注解驱动的、WebMvc场景下的<br> **xml配置：**出现比较早、本身比较灵活、可编写内容相对受限<br> **注解配置：**简单，但是可见性差，每次需要编译</li></ul><h4 id="beandefinition" tabindex="-1"><a class="header-anchor" href="#beandefinition"><span>BeanDefinition</span></a></h4><ul><li>Bean的类信息：全限定名</li><li>Bean的属性：作用域、是否默认Bean、描述信息等</li><li>Bean的行为特征；是否延迟加载、是否自动注入、初始化/销毁方法</li><li>与其他Bean的关系：父Bean名称、依赖的Bean</li><li>Bean的配置属性：构造器参数、属性变量值</li></ul><h3 id="springboot中的aop" tabindex="-1"><a class="header-anchor" href="#springboot中的aop"><span>SpringBoot中的AOP</span></a></h3><h3 id="springboot整合jdbc后的自动配置" tabindex="-1"><a class="header-anchor" href="#springboot整合jdbc后的自动配置"><span>SpringBoot整合jdbc后的自动配置</span></a></h3><p>Spring Boot默认支持的自动配置包括数据源、JdbcTemplate、事务管理器；它会根据classpath中的类，自动配置数据源</p><h3 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>Mybatis</span></a></h3><p>三层：接口、核心、支持层<br> 适配SpringBoot</p><h1 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件"><span>中间件</span></a></h1><h2 id="消息中间件-主要学习rocketmq" tabindex="-1"><a class="header-anchor" href="#消息中间件-主要学习rocketmq"><span>消息中间件（主要学习RocketMQ）</span></a></h2><p>定义：分布式系统中用于在不同组件或者应用之间传递消息的软件组件或者服务<br> 功能：系统解耦；异步处理；削峰<br> **RocketMQ：**一款低延迟、高并发、高可用、高可靠的分布式消息中间件。<br> 一个主题里面多个队列，一个队列里面存储多个消息。</p><ul><li>可靠传输：生产者，broker（持久化），消费者三方面都要考虑</li><li>顺序消费：怎么实现？？？？</li></ul><h2 id="分布式协调服务" tabindex="-1"><a class="header-anchor" href="#分布式协调服务"><span>分布式协调服务</span></a></h2><p>它是分布式系统中的一个关键组件，他用于确保系统中各个节点之间的数据一致性、协调性（是一个协调服务的节点）<br> ZooKeeper Etcd（用在K8S上，容器化） Consul Nacos<br><strong>为什么需要分布式协调服务？？</strong></p><h3 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁</span></a></h3><p><strong>SpringBoot原理啥的还是有点不懂，但是最起码还算会用</strong></p>',38)]))}const c=n(o,[["render",r]]),h=JSON.parse('{"path":"/posts/xiaomi/Day9SpringBoot%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1.html","title":"SpringBoot与微服务","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-24T00:00:00.000Z","category":["小米训练营"],"tag":["Java","SpringBoot","微服务"],"description":"SpringBoot与微服务 SpringBoot整体概述 SpringBoot核心特性 约定大于配置 场景启动器-starter 自动装配 嵌入式Web容器 生产级别的特性 三种启动方式 网页启动-SpringBootInitializer-目前只支持JDK17以上 IDE创建-现在也只支持JDK17 Maven自己创建SpringBoot项目才能支...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot与微服务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-30T09:11:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/xiaomi/Day9SpringBoot%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"SpringBoot与微服务"}],["meta",{"property":"og:description","content":"SpringBoot与微服务 SpringBoot整体概述 SpringBoot核心特性 约定大于配置 场景启动器-starter 自动装配 嵌入式Web容器 生产级别的特性 三种启动方式 网页启动-SpringBootInitializer-目前只支持JDK17以上 IDE创建-现在也只支持JDK17 Maven自己创建SpringBoot项目才能支..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-30T09:11:56.000Z"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2025-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-30T09:11:56.000Z"}]]},"git":{"createdTime":1750725332000,"updatedTime":1751274716000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":2}]},"readingTime":{"minutes":3.03,"words":910},"filePathRelative":"posts/xiaomi/Day9SpringBoot与微服务.md","excerpt":"\\n<h2>SpringBoot整体概述</h2>\\n<p><strong>SpringBoot核心特性</strong></p>\\n<ul>\\n<li>约定大于配置</li>\\n<li>场景启动器-starter</li>\\n<li>自动装配</li>\\n<li>嵌入式Web容器</li>\\n<li>生产级别的特性<br>\\n<strong>三种启动方式</strong></li>\\n<li>网页启动-SpringBootInitializer-目前只支持JDK17以上</li>\\n<li>IDE创建-现在也只支持JDK17</li>\\n<li>Maven自己创建SpringBoot项目才能支持JDK8了</li>\\n</ul>","autoDesc":true}');export{c as comp,h as data};
