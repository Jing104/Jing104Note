import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,o as r}from"./app-BIXQzZxO.js";const a={};function l(i,e){return r(),o("div",null,e[0]||(e[0]=[n('<h1 id="零散知识小记" tabindex="-1"><a class="header-anchor" href="#零散知识小记"><span>零散知识小记</span></a></h1><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>SpringBoot</span></a></h2><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h3><ul><li>@Component和@Bean的区别：两者都是将某个Bean装配到容器中，有啥不同呢，为啥不推荐混用呢？@Component是放在类上的，大部分情况是我们自己写的类，比如Controller控制器层的类、Service业务层的类等等，将这些装配到容器中方便业务调用；而@Bean是写在方法上的，方法返回的对象是我们要装配的类，当然你可以用这个来装配我们自己写的业务类，没有问题，但是大多数情况下是用来装配依赖或者一些第三方库的类，因为这些类的代码都写好了，他们肯定不会自带@Component注解，那我们又想装配到容器中，就得用@Bean注解实现了，@Bean方法必须放在Spring管理的类中，推荐在@Configuration注解类中，这样Spring才能识别并注册。否则写在一个普通类中是不会生效的。</li><li>@RestController和@Controller：之前不是很了解，对注解理解不深，平时做的还是前后端分离的项目，写后端Controller类的时候总会在上面想当然的写上@Controller，然后就出问题了。@Controller返回的是一个页面，用于传统MVC开发，html啥的跟后端或者说跟项目耦合在一起，没有前后端分离一说，如果想返回json数据，就要在类中的方法上加上@ResponseBody注解；@RestController就不一样了，用于前后端分离中后端Controller类，让其作为Restful接口，所有的请求调用方法的返回结果会自动写入响应体并根据配置或请求头决定格式。</li><li>@RequestBody：将HTTP请求体的内容（如JSON、XML等）映射到一个Java对象。</li><li>@PathVariable：从URI路径中提取参数值，将其映射到方法的参数上。常用于RESTful服务中，允许动态地将URL中的部分作为方法参数使用。（URL是URI的一种，可以看{ text: &quot;值得反复观看的文章&quot;, link: &quot;值得反复观看的文章&quot; }中对URI和URL的解释）</li></ul>',4)]))}const m=t(a,[["render",l]]),c=JSON.parse('{"path":"/posts/others/%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%9A%84%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%82%B9.html","title":"零散知识小记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-16T00:00:00.000Z","tag":"-小知识","description":"零散知识小记 SpringBoot 注解 @Component和@Bean的区别：两者都是将某个Bean装配到容器中，有啥不同呢，为啥不推荐混用呢？@Component是放在类上的，大部分情况是我们自己写的类，比如Controller控制器层的类、Service业务层的类等等，将这些装配到容器中方便业务调用；而@Bean是写在方法上的，方法返回的对象是...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"零散知识小记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-16T12:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/others/%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%9A%84%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"零散知识小记"}],["meta",{"property":"og:description","content":"零散知识小记 SpringBoot 注解 @Component和@Bean的区别：两者都是将某个Bean装配到容器中，有啥不同呢，为啥不推荐混用呢？@Component是放在类上的，大部分情况是我们自己写的类，比如Controller控制器层的类、Service业务层的类等等，将这些装配到容器中方便业务调用；而@Bean是写在方法上的，方法返回的对象是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T12:11:10.000Z"}],["meta",{"property":"article:tag","content":"-小知识"}],["meta",{"property":"article:published_time","content":"2025-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T12:11:10.000Z"}]]},"git":{"createdTime":1752667870000,"updatedTime":1752667870000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1}]},"readingTime":{"minutes":1.86,"words":558},"filePathRelative":"posts/others/零零散散的知识小点.md","excerpt":"\\n<h2>SpringBoot</h2>\\n<h3>注解</h3>\\n<ul>\\n<li>@Component和@Bean的区别：两者都是将某个Bean装配到容器中，有啥不同呢，为啥不推荐混用呢？@Component是放在类上的，大部分情况是我们自己写的类，比如Controller控制器层的类、Service业务层的类等等，将这些装配到容器中方便业务调用；而@Bean是写在方法上的，方法返回的对象是我们要装配的类，当然你可以用这个来装配我们自己写的业务类，没有问题，但是大多数情况下是用来装配依赖或者一些第三方库的类，因为这些类的代码都写好了，他们肯定不会自带@Component注解，那我们又想装配到容器中，就得用@Bean注解实现了，@Bean方法必须放在Spring管理的类中，推荐在@Configuration注解类中，这样Spring才能识别并注册。否则写在一个普通类中是不会生效的。</li>\\n<li>@RestController和@Controller：之前不是很了解，对注解理解不深，平时做的还是前后端分离的项目，写后端Controller类的时候总会在上面想当然的写上@Controller，然后就出问题了。@Controller返回的是一个页面，用于传统MVC开发，html啥的跟后端或者说跟项目耦合在一起，没有前后端分离一说，如果想返回json数据，就要在类中的方法上加上@ResponseBody注解；@RestController就不一样了，用于前后端分离中后端Controller类，让其作为Restful接口，所有的请求调用方法的返回结果会自动写入响应体并根据配置或请求头决定格式。</li>\\n<li>@RequestBody：将HTTP请求体的内容（如JSON、XML等）映射到一个Java对象。</li>\\n<li>@PathVariable：从URI路径中提取参数值，将其映射到方法的参数上。常用于RESTful服务中，允许动态地将URL中的部分作为方法参数使用。（URL是URI的一种，可以看{ text: \\"值得反复观看的文章\\", link: \\"值得反复观看的文章\\" }中对URI和URL的解释）</li>\\n</ul>","autoDesc":true}');export{m as comp,c as data};
