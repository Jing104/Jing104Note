import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as g}from"./app-BIXQzZxO.js";const s="/assets/jiagou-DuNR8WAe.png",o="/assets/img_20-BNdZvGRb.png",e="/assets/img_8-Bg3hGtfj.png",r="/assets/img_9-DkfnwyQp.png",p="/assets/img_1-v4igRBQs.png",l="/assets/img_3-DODB7QNm.png",c="/assets/img_6-I1lF553J.png",m="/assets/img_5-DeJPl-qj.png",d="/assets/img-Fx7T4mSo.png",_="/assets/img_4-CqqlDaTr.png",h="/assets/img_21-4xo-DYjI.png",u="/assets/img_22-CkpeEo8S.png",f="/assets/img_11-Cvwv5wJH.png",y="/assets/img_10-By0pf4oR.png",b="/assets/img_7-CiDlE3nk.png",x="/assets/img_14-D7yMThMO.png",v="/assets/img_12-dhQH4clB.png",A="/assets/img_13-BLlNmD5G.png",z="/assets/img_16-B5T-hn9H.png",D="/assets/img_15-BH8-VD-3.png",I="/assets/img_17-Co3jIksR.png",w="/assets/img_24-CAjTuWye.png",T="/assets/img_25-DULCUw7F.png",j="/assets/img_18-DXU3TwbX.png",E="/assets/img_23-9HSYJb_Q.png",J={};function B(k,i){return g(),t("div",null,i[0]||(i[0]=[a('<h1 id="小米训练营大作业-技术方案" tabindex="-1"><a class="header-anchor" href="#小米训练营大作业-技术方案"><span>小米训练营大作业 - 技术方案</span></a></h1><h2 id="整体架构设计" tabindex="-1"><a class="header-anchor" href="#整体架构设计"><span>整体架构设计</span></a></h2><p>本项目整体采用微服务架构进行设计与实现。通过对后端进行模块化划分，使各服务之间职责清晰、可扩展性强、易于维护。</p><figure><img src="'+s+'" alt="jiagou.png" tabindex="0" loading="lazy"><figcaption>jiagou.png</figcaption></figure><h3 id="数据库关系说明" tabindex="-1"><a class="header-anchor" href="#数据库关系说明"><span>数据库关系说明：</span></a></h3><p>数据库采用关系型数据库进行设计，具体表结构与实体关系如下图所示：</p><figure><img src="'+o+'" alt="img_20.png" tabindex="0" loading="lazy"><figcaption>img_20.png</figcaption></figure><p>整个后端系统划分为以下七个核心模块：</p><ul><li><strong>api-gateway</strong></li><li><strong>common</strong></li><li><strong>service-auth</strong></li><li><strong>service-chat</strong></li><li><strong>service-history</strong></li><li><strong>service-knowledge</strong></li><li><strong>service-log</strong></li></ul><p>具体模块划分示意图如下：</p><p><img src="'+e+'" alt="img_8.png" loading="lazy"><br><img src="'+r+'" alt="img_9.png" loading="lazy"></p><p>其中，<code>api-gateway</code>、<code>service-auth</code>、<code>service-chat</code>、<code>service-history</code>、<code>service-knowledge</code> 等模块通过 Nacos 进行服务发现与配置管理，实现服务之间的动态注册与配置集中管理。</p><h3 id="各模块功能简要描述" tabindex="-1"><a class="header-anchor" href="#各模块功能简要描述"><span>各模块功能简要描述：</span></a></h3><ul><li><p><strong>api-gateway（网关服务）</strong><br> 网关模块，端口号设定为 <code>8088</code>，主要负责对外接口的统一入口，提供初步鉴权、限流、路由分发等功能。</p></li><li><p><strong>common（通用模块）</strong><br> 用于存放系统级公共资源，如全局异常处理、统一请求返回格式定义、通用工具类、拦截器配置等，为其他服务模块提供基础支撑。</p></li><li><p><strong>service-auth（用户认证模块）</strong><br> 监听端口 <code>8081</code>，实现用户的登录、注册、身份认证等功能，负责用户身份的管理。</p></li><li><p><strong>service-chat（AI问答与会话管理模块）</strong><br> 端口号 <code>8082</code>，主要负责 AI 问答、会话流程控制、上下文管理等与用户对话相关的核心逻辑。</p></li><li><p><strong>service-history（会话历史管理模块）</strong><br> 监听端口 <code>8085</code>，负责存储、查询用户与 AI 问答过程中的历史对话消息。</p></li><li><p><strong>service-knowledge（知识库管理模块）</strong><br> 端口号 <code>8083</code>，用于管理用户上传的知识库，支持知识入库、向量处理及检索功能。</p></li><li><p><strong>service-log（日志记录模块）</strong><br> 监听端口 <code>8084</code>，目前主要实现用户请求操作日志的记录与保存。</p></li></ul><hr><h2 id="详细设计说明" tabindex="-1"><a class="header-anchor" href="#详细设计说明"><span>详细设计说明</span></a></h2><h3 id="用户模块" tabindex="-1"><a class="header-anchor" href="#用户模块"><span>用户模块</span></a></h3><p>（演示视频可见 Day1 成果目录）</p><h4 id="注册功能设计" tabindex="-1"><a class="header-anchor" href="#注册功能设计"><span>注册功能设计</span></a></h4><p>采用基于邮箱验证码注册的方式，有效提升账户安全性。用户邮箱即为注册用户名。</p><ul><li>邮箱授权采用 <strong>SMTP 协议</strong> 进行。</li></ul><figure><img src="'+p+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><ul><li><p>后端实现涉及验证码的生成、存储、有效性验证等核心流程。验证码在生成后立即发送到对应用户邮箱，并同步保存到 Redis 缓存中，默认有效期为 2 分钟，超时后自动失效。</p></li><li><p>用户在注册时必须正确输入验证码，验证通过后方可完成注册流程。</p></li></ul><figure><img src="'+l+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><h4 id="登录功能设计" tabindex="-1"><a class="header-anchor" href="#登录功能设计"><span>登录功能设计</span></a></h4><p>登录流程采用用户邮箱与密码双重验证。</p><ul><li><p>用户输入邮箱和密码进行登录请求。</p></li><li><p>登录成功后，后端服务生成 JWT Token，并将其存储至上下文中，供后续用户请求进行身份鉴权使用。</p></li></ul><p><img src="'+c+'" alt="img_6.png" loading="lazy"><br><img src="'+m+'" alt="img_5.png" loading="lazy"><br> （此处仅为测试演示截图）</p><h4 id="用户信息管理" tabindex="-1"><a class="header-anchor" href="#用户信息管理"><span>用户信息管理</span></a></h4><p>系统支持用户对个人信息进行管理，包括但不限于：</p><ul><li><p>修改用户头像（头像图片存储于阿里云 OSS 服务器）。</p></li><li><p>修改昵称等基本信息。</p></li><li><p>支持通过邮箱验证码进行密码修改，以保证账户安全性。</p></li></ul><figure><img src="'+d+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><hr><h3 id="ai-问答与会话管理模块设计" tabindex="-1"><a class="header-anchor" href="#ai-问答与会话管理模块设计"><span>AI 问答与会话管理模块设计</span></a></h3><ul><li>本模块主要负责接收用户输入的问题，通过调用 <strong>qwen-plus 模型接口</strong> 实现 AI 客服问答服务。</li></ul><figure><img src="'+_+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><ul><li>在 AI 问答过程中，模块通过 <strong>OpenFeign</strong> 远程调用 <strong>会话历史消息管理模块</strong>，获取对应会话的历史消息，作为上下文，增强 AI 问答的连贯性与上下文理解能力。</li></ul><figure><img src="'+h+'" alt="img_21.png" tabindex="0" loading="lazy"><figcaption>img_21.png</figcaption></figure><ul><li>同时，模块通过 <strong>OpenFeign</strong> 调用 <strong>知识库管理模块</strong>，在对话时结合知识库内容进行智能回复。</li></ul><figure><img src="'+u+'" alt="img_22.png" tabindex="0" loading="lazy"><figcaption>img_22.png</figcaption></figure><ul><li>两个远程调用均使用 Java8 新特性 <strong>Lambda 表达式</strong>，并结合 <strong>线程池</strong> 创建两个子线程进行异步并行处理，提高响应效率。</li></ul><figure><img src="'+f+'" alt="img_11.png" tabindex="0" loading="lazy"><figcaption>img_11.png</figcaption></figure><ul><li>对用户对话内容进行缓存处理，使用 Redis 存储用户问题与对应 AI 回复。对于重复提问，先从缓存中读取，如无命中再请求 AI 模型接口。</li></ul><figure><img src="'+y+'" alt="img_10.png" tabindex="0" loading="lazy"><figcaption>img_10.png</figcaption></figure><ul><li><p>消息持久化部分，使用 <strong>RocketMQ 消息队列</strong>，通过生产者将对话消息发送至队列，由消费者异步落库至数据库。<br><strong>当前存在的问题</strong>：<br> 因需根据会话 ID 保证消息顺序，且消费失败后存在重试机制，容易导致消息多次落库。为此，已对生产者进行优化，根据会话 ID 将消息投递至不同队列，但该方案仍存在部分问题，后续需持续优化改进。</p></li><li><p>支持 <strong>流式输出</strong> 与 <strong>一次性输出</strong>，目前由前端负责流控逻辑。</p></li><li><p>支持用户进行 <strong>会话新建、选择与管理</strong> 等功能操作。</p></li></ul><figure><img src="'+b+'" alt="img_7.png" tabindex="0" loading="lazy"><figcaption>img_7.png</figcaption></figure><hr><h3 id="会话历史消息管理模块设计" tabindex="-1"><a class="header-anchor" href="#会话历史消息管理模块设计"><span>会话历史消息管理模块设计</span></a></h3><ul><li><p>本模块主要负责对会话过程中的历史消息进行持久化存储。</p></li><li><p>对外开放接口，供 AI 问答模块调用，以便获取指定会话的历史消息，支持基于上下文的对话续接功能。</p></li><li><p>能够支持用户下次会话时继续在历史上下文中接入，保证用户体验的连续性。</p></li></ul><figure><img src="'+x+'" alt="img_14.png" tabindex="0" loading="lazy"><figcaption>img_14.png</figcaption></figure><hr><h3 id="知识库管理模块设计" tabindex="-1"><a class="header-anchor" href="#知识库管理模块设计"><span>知识库管理模块设计</span></a></h3><ul><li><p>本模块支持用户通过以下两种方式上传知识内容：</p><ol><li><p><strong>文件上传方式</strong></p></li><li><p><strong>手动输入方式</strong></p></li></ol></li></ul><p><img src="'+v+'" alt="img_12.png" loading="lazy"><br><img src="'+A+'" alt="img_13.png" loading="lazy"></p><ul><li>用户上传知识库后，后端会调用专门的 <strong>Python 服务</strong>，并结合 <strong>向量模型</strong> 对上传内容进行向量化处理，生成知识库向量，方便后续进行 RAG 检索。</li></ul><p><img src="'+z+'" alt="img_16.png" loading="lazy"><br><img src="'+D+'" alt="img_15.png" loading="lazy"><br><img src="'+I+'" alt="img_17.png" loading="lazy"></p><ul><li><p>在知识库检索过程中，首先通过 <strong>RAG 检索算法</strong> 对知识库进行向量匹配查询，获取相关内容后，再将检索结果作为上下文 Prompt 传递给 AI 模型进行回复生成。</p></li><li><p>向量检索逻辑中，使用了 Java Stream 流式操作对集合进行处理。</p></li><li><p>向量操作及处理方法主要参考网络公开资料，尚未进行深入研究与优化。</p></li></ul><p><img src="'+w+'" alt="img_24.png" loading="lazy"><br><img src="'+T+'" alt="img_25.png" loading="lazy"></p><hr><h3 id="日志模块设计" tabindex="-1"><a class="header-anchor" href="#日志模块设计"><span>日志模块设计</span></a></h3><ul><li><p>本模块使用 <strong>AOP 面向切面编程</strong> 技术，实现对用户操作行为的自动日志记录。</p></li><li><p>系统对所有用户请求 Controller 层接口的行为进行统一拦截与日志记录，确保操作行为可追溯。</p></li></ul><p><img src="'+j+'" alt="img_18.png" loading="lazy"><br><img src="'+E+'" alt="img_23.png" loading="lazy"></p><h2 id="项目演示视频" tabindex="-1"><a class="header-anchor" href="#项目演示视频"><span>项目演示视频</span></a></h2><video controls width="800"><source src="https://github.com/Jing104/Jing104Note/releases/download/v1.0.0/java5-demo.mp4" type="video/mp4"> Your browser does not support the video tag. </video><h2 id="实训总结" tabindex="-1"><a class="header-anchor" href="#实训总结"><span>实训总结</span></a></h2><p>通过本次小米训练营，我学到了许多新知识，也把之前背的八股文进行了复习和代码实践。</p><p>在实训的各个阶段，从需求理解、方案设计到最终实现，我收获了很多宝贵的经验。通过亲自参与，我对项目开发流程有了更清晰的认识，也提升了自己独立思考和动手实践的能力。</p><p>非常感谢小米公司为我们提供这样一个实践平台，也感谢老师的耐心指导与帮助。每次的答疑、讲解，都让我受益匪浅。</p><p>同时，我也清晰地认识到了自己的不足之处。无论是对整体架构的理解深度，还是在方案设计、时间管理、以及任务执行中的细节把控上，都还有很多需要提升的地方。</p><p>未来，我会继续努力，弥补不足， 再次感谢小米和所有老师的支持与帮助！</p>',70)]))}const R=n(J,[["render",B]]),S=JSON.parse('{"path":"/posts/xiaomi/Day12-15AI%E5%AE%A2%E6%9C%8D%E5%AE%9E%E8%B7%B5.html","title":"小米训练营大作业 - 技术方案","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-27T00:00:00.000Z","category":["小米训练营"],"tag":["AI客服","实践"],"description":"小米训练营大作业 - 技术方案 整体架构设计 本项目整体采用微服务架构进行设计与实现。通过对后端进行模块化划分，使各服务之间职责清晰、可扩展性强、易于维护。 jiagou.pngjiagou.png 数据库关系说明： 数据库采用关系型数据库进行设计，具体表结构与实体关系如下图所示： img_20.pngimg_20.png 整个后端系统划分为以下七个核...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"小米训练营大作业 - 技术方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-18T01:49:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/xiaomi/Day12-15AI%E5%AE%A2%E6%9C%8D%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"小米训练营大作业 - 技术方案"}],["meta",{"property":"og:description","content":"小米训练营大作业 - 技术方案 整体架构设计 本项目整体采用微服务架构进行设计与实现。通过对后端进行模块化划分，使各服务之间职责清晰、可扩展性强、易于维护。 jiagou.pngjiagou.png 数据库关系说明： 数据库采用关系型数据库进行设计，具体表结构与实体关系如下图所示： img_20.pngimg_20.png 整个后端系统划分为以下七个核..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-18T01:49:10.000Z"}],["meta",{"property":"article:tag","content":"实践"}],["meta",{"property":"article:tag","content":"AI客服"}],["meta",{"property":"article:published_time","content":"2025-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-18T01:49:10.000Z"}]]},"git":{"createdTime":1752401993000,"updatedTime":1752803350000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1},{"name":"Jing104","username":"Jing104","email":"2046485376@qq.com","commits":1,"url":"https://github.com/Jing104"}]},"readingTime":{"minutes":6.63,"words":1989},"filePathRelative":"posts/xiaomi/Day12-15AI客服实践.md","excerpt":"\\n<h2>整体架构设计</h2>\\n<p>本项目整体采用微服务架构进行设计与实现。通过对后端进行模块化划分，使各服务之间职责清晰、可扩展性强、易于维护。</p>\\n<figure><figcaption>jiagou.png</figcaption></figure>\\n<h3>数据库关系说明：</h3>\\n<p>数据库采用关系型数据库进行设计，具体表结构与实体关系如下图所示：</p>\\n<figure><figcaption>img_20.png</figcaption></figure>\\n<p>整个后端系统划分为以下七个核心模块：</p>\\n<ul>\\n<li><strong>api-gateway</strong></li>\\n<li><strong>common</strong></li>\\n<li><strong>service-auth</strong></li>\\n<li><strong>service-chat</strong></li>\\n<li><strong>service-history</strong></li>\\n<li><strong>service-knowledge</strong></li>\\n<li><strong>service-log</strong></li>\\n</ul>","autoDesc":true}');export{R as comp,S as data};
