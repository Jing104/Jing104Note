import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o}from"./app-r6MPGHfX.js";const r={};function a(c,t){return o(),e("div",null,t[0]||(t[0]=[n('<h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>Spring</span></a></h1><h2 id="配置类的理解学习" tabindex="-1"><a class="header-anchor" href="#配置类的理解学习"><span>配置类的理解学习</span></a></h2><table><thead><tr><th>特性/维度</th><th>配置类中的 <code>@Bean</code> 方法</th><th>配置类实现配置接口</th><th>普通类</th></tr></thead><tbody><tr><td>所属类</td><td>配置类（<code>@Configuration</code>）</td><td>配置类（<code>@Configuration</code>）或 <code>@Component</code> 类</td><td>任意普通类</td></tr><tr><td>注册到容器方式</td><td>使用 <code>@Bean</code> 注解自动注册</td><td>Spring 自动调用接口方法配置注册</td><td>需加 <code>@Component</code> 等注解手动注册</td></tr><tr><td>方法是否自动调用</td><td>✅ 会在启动时自动执行一次</td><td>✅ 实现接口的方法在启动时自动回调</td><td>❌ 不会自动调用，除非主动调用</td></tr><tr><td>是否可参与依赖注入</td><td>✅ 返回值会成为 Spring 容器中的 Bean</td><td>一般不返回 Bean，但影响 Bean 的配置</td><td>可以注入，但本身不会参与配置流程</td></tr><tr><td>典型用途</td><td>注册服务、工具类、第三方组件等</td><td>配置框架功能（如 WebSocket、MVC、Security）</td><td>实体类、Service、工具类等</td></tr><tr><td>使用示例</td><td><code>@Bean public DataSource ds() {...}</code></td><td><code>implements WebSocketMessageBrokerConfigurer</code></td><td><code>public class User {...}</code></td></tr><tr><td>生命周期控制</td><td>✅ 受 Spring 管理（单例/多例）</td><td>间接影响生命周期，如注册拦截器、端点</td><td>❌ 不自动受控，需额外注解或配置</td></tr><tr><td>依赖注入能力</td><td>✅ 支持构造注入、字段注入、方法注入</td><td>✅ 通常通过字段/构造注入</td><td>✅ 但需标记为 Bean 或被容器管理</td></tr><tr><td>Spring 生命周期钩子</td><td>❌ 通常不用于生命周期钩子</td><td>✅ 可作为配置钩子（初始化阶段生效）</td><td>❌ 除非手动触发生命周期相关方法</td></tr></tbody></table><p>配置类中Bean对象的id：</p><table><thead><tr><th>写法方式</th><th>Bean ID（名称）</th></tr></thead><tbody><tr><td><code>@Bean public MyService myService()</code></td><td><code>myService</code>（默认）</td></tr><tr><td><code>@Bean(&quot;customService&quot;)</code></td><td><code>customService</code></td></tr><tr><td><code>@Bean(name = &quot;svc&quot;)</code></td><td><code>svc</code></td></tr><tr><td><code>@Bean(value = &quot;myBean&quot;)</code></td><td><code>myBean</code></td></tr><tr><td><code>@Bean({&quot;alias1&quot;, &quot;alias2&quot;})</code></td><td><code>alias1</code>, <code>alias2</code>（别名）</td></tr></tbody></table>',5)]))}const s=d(r,[["render",a]]),m=JSON.parse('{"path":"/posts/interview/Spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-04-29T00:00:00.000Z","category":["八股"],"tag":["Spring","SpringBoot"],"description":"Spring 配置类的理解学习 配置类中Bean对象的id：","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-16T12:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/interview/Spring.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"Spring 配置类的理解学习 配置类中Bean对象的id："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T12:11:10.000Z"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2025-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T12:11:10.000Z"}]]},"git":{"createdTime":1752667870000,"updatedTime":1752667870000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1}]},"readingTime":{"minutes":1.42,"words":426},"filePathRelative":"posts/interview/Spring.md","excerpt":"\\n<h2>配置类的理解学习</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>特性/维度</th>\\n<th>配置类中的 <code>@Bean</code> 方法</th>\\n<th>配置类实现配置接口</th>\\n<th>普通类</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>所属类</td>\\n<td>配置类（<code>@Configuration</code>）</td>\\n<td>配置类（<code>@Configuration</code>）或 <code>@Component</code> 类</td>\\n<td>任意普通类</td>\\n</tr>\\n<tr>\\n<td>注册到容器方式</td>\\n<td>使用 <code>@Bean</code> 注解自动注册</td>\\n<td>Spring 自动调用接口方法配置注册</td>\\n<td>需加 <code>@Component</code> 等注解手动注册</td>\\n</tr>\\n<tr>\\n<td>方法是否自动调用</td>\\n<td>✅ 会在启动时自动执行一次</td>\\n<td>✅ 实现接口的方法在启动时自动回调</td>\\n<td>❌ 不会自动调用，除非主动调用</td>\\n</tr>\\n<tr>\\n<td>是否可参与依赖注入</td>\\n<td>✅ 返回值会成为 Spring 容器中的 Bean</td>\\n<td>一般不返回 Bean，但影响 Bean 的配置</td>\\n<td>可以注入，但本身不会参与配置流程</td>\\n</tr>\\n<tr>\\n<td>典型用途</td>\\n<td>注册服务、工具类、第三方组件等</td>\\n<td>配置框架功能（如 WebSocket、MVC、Security）</td>\\n<td>实体类、Service、工具类等</td>\\n</tr>\\n<tr>\\n<td>使用示例</td>\\n<td><code>@Bean public DataSource ds() {...}</code></td>\\n<td><code>implements WebSocketMessageBrokerConfigurer</code></td>\\n<td><code>public class User {...}</code></td>\\n</tr>\\n<tr>\\n<td>生命周期控制</td>\\n<td>✅ 受 Spring 管理（单例/多例）</td>\\n<td>间接影响生命周期，如注册拦截器、端点</td>\\n<td>❌ 不自动受控，需额外注解或配置</td>\\n</tr>\\n<tr>\\n<td>依赖注入能力</td>\\n<td>✅ 支持构造注入、字段注入、方法注入</td>\\n<td>✅ 通常通过字段/构造注入</td>\\n<td>✅ 但需标记为 Bean 或被容器管理</td>\\n</tr>\\n<tr>\\n<td>Spring 生命周期钩子</td>\\n<td>❌ 通常不用于生命周期钩子</td>\\n<td>✅ 可作为配置钩子（初始化阶段生效）</td>\\n<td>❌ 除非手动触发生命周期相关方法</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{s as comp,m as data};
