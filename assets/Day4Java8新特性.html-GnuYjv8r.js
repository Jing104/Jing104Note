import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as t,o as e}from"./app-BtXOPi23.js";const n={};function h(p,a){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="day4-java8新特性" tabindex="-1"><a class="header-anchor" href="#day4-java8新特性"><span>Day4 Java8新特性</span></a></h1><h2 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程"><span>函数式编程</span></a></h2><p><strong>优点</strong><br> 简化代码，增强可读性<br><strong>特点</strong></p><ul><li>纯函数</li><li>不可变性</li><li>高阶函数</li><li>声明式函数</li><li>递归<br><em>新知识final和effective final：当定义的变量实际没有更改的时候，Java会在运行时隐式的将其改为final。</em><br><strong>所有的函数式编程都是值传递，不是引用传递</strong></li></ul><h3 id="函数式编程-functionalinterface注解-函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式编程-functionalinterface注解-函数式接口"><span>函数式编程（FunctionalInterface注解--函数式接口）</span></a></h3><h4 id="predicate-t" tabindex="-1"><a class="header-anchor" href="#predicate-t"><span><code>Predicate&lt;T&gt;</code></span></a></h4><p>接受一个参数，返回一个布尔值；可以看作一个判断条件或者筛选器</p><h4 id="consumer-t" tabindex="-1"><a class="header-anchor" href="#consumer-t"><span><code>Consumer&lt;T&gt;</code></span></a></h4><p>接受一个参数，进行操作，不反悔任何值；一个执行某种操作的消费者，对传入的参数做一些处理和操作</p><h4 id="function-t-r" tabindex="-1"><a class="header-anchor" href="#function-t-r"><span><code>Function&lt;T,R&gt;</code></span></a></h4><p>接受一个参数，返回一个结果；一个转换器或者映射器，比如接受一个字符串，返回这个字符串长度</p><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>Lambda表达式</span></a></h2><p>增强可读性<br><a href="https://imgse.com/i/pVVZItP" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVZItP.png" alt="pVVZItP.png" loading="lazy"></a><br><a href="https://imgse.com/i/pVVZxkq" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVZxkq.png" alt="pVVZxkq.png" loading="lazy"></a></p><h2 id="streamapi" tabindex="-1"><a class="header-anchor" href="#streamapi"><span>StreamAPI</span></a></h2><p><strong>Stream是值传递，不会改变原来的变量,所以不能用Stream代替全部</strong><br> 对数据集和的一种高级抽象，用于以声明式的方式处理数据<br> 语法糖</p><h3 id="常用中间操作-filter" tabindex="-1"><a class="header-anchor" href="#常用中间操作-filter"><span>常用中间操作-filter</span></a></h3><p>对元素进行过滤，接受的参数类型是 <code>Predicate&lt;T&gt;</code>，布尔值来判断过滤条件</p><h3 id="常用中间操作-map" tabindex="-1"><a class="header-anchor" href="#常用中间操作-map"><span>常用中间操作-map</span></a></h3><p>对元素进行转换，接受的参数类型是 <code>Function&lt;T,R&gt;</code>，有一个返回值作为转换后的元素</p><h3 id="常用中间操作-flatmap" tabindex="-1"><a class="header-anchor" href="#常用中间操作-flatmap"><span>常用中间操作-flatMap</span></a></h3><p>用于将一个Stream中的每个元素转换为一个新的Stream，然后将这些新的Stream扁平化合并为一个新的Stream</p><h3 id="常用中间操作-sorted" tabindex="-1"><a class="header-anchor" href="#常用中间操作-sorted"><span>常用中间操作-sorted</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> studentList1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Student</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> collectedStudent </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> studentList1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((x1,x2)</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getGrade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getGrade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getGrade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getGrade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用终端操作-foreach" tabindex="-1"><a class="header-anchor" href="#常用终端操作-foreach"><span>常用终端操作-forEach</span></a></h3><p>循环遍历<br><strong>重申：我们是值传递，不会改变原来的变量</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> testNames </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Alice&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Bob&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Charlie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        testNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用终端操作-reduce" tabindex="-1"><a class="header-anchor" href="#常用终端操作-reduce"><span>常用终端操作-reduce</span></a></h3><figure><a href="https://imgse.com/i/pVVlysf" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVlysf.png" alt="pVVlysf.png" tabindex="0" loading="lazy"></a><figcaption>pVVlysf.png</figcaption></figure><h3 id="常用终端操作-collect" tabindex="-1"><a class="header-anchor" href="#常用终端操作-collect"><span>常用终端操作-collect</span></a></h3><p>collect（收集）用于将Stream中的元素手机到一个新的集合中</p><h4 id="collectors-partitioningby" tabindex="-1"><a class="header-anchor" href="#collectors-partitioningby"><span>Collectors.partitioningBy</span></a></h4><p>不常用。根据条件将元素分组，主键是Boolean</p><h4 id="collectors-groupingby" tabindex="-1"><a class="header-anchor" href="#collectors-groupingby"><span>Collectors.groupingBy</span></a></h4><p>常用场景：用空间复杂度换时间复杂度<br> 返回一个<code>Map&lt;K,List&lt;T&gt;&gt;</code>,其中K是分组的键，可以是任意类型，由指定的分组函数决定。</p><h3 id="foreach和foreachorder" tabindex="-1"><a class="header-anchor" href="#foreach和foreachorder"><span>ForEach和ForEachOrder</span></a></h3><p>并行流中ForEach不保证顺序，ForEachOrder保证顺序</p><h3 id="peek" tabindex="-1"><a class="header-anchor" href="#peek"><span>peek</span></a></h3><figure><a href="https://imgse.com/i/pVV3ABT" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVV3ABT.png" alt="pVV3ABT.png" tabindex="0" loading="lazy"></a><figcaption>pVV3ABT.png</figcaption></figure><h2 id="optional类和新的日期时间api" tabindex="-1"><a class="header-anchor" href="#optional类和新的日期时间api"><span>Optional类和新的日期时间API</span></a></h2><h3 id="optional类" tabindex="-1"><a class="header-anchor" href="#optional类"><span>Optional类</span></a></h3><p>明确地处理空值，在许多Java代码中，控制的处理常常导致NullPointerExceotion。通过使用Optional，可以更明确地表示一个值可能为空，促使开发者更有意识地处理可能的空情况，从而减少运行时的空指针异常。<br><a href="https://imgse.com/i/pVV3kuV" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVV3kuV.png" alt="pVV3kuV.png" loading="lazy"></a><br><a href="https://imgse.com/i/pVV3YUe" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVV3YUe.png" alt="pVV3YUe.png" loading="lazy"></a></p><h3 id="新的日期时间api" tabindex="-1"><a class="header-anchor" href="#新的日期时间api"><span>新的日期时间API</span></a></h3><h4 id="传统时间处理的问题" tabindex="-1"><a class="header-anchor" href="#传统时间处理的问题"><span>传统时间处理的问题</span></a></h4><ul><li>Date类同时表示日期和时间，不够清晰</li><li>Calendar 类的线程不安全</li><li>格式化和解析困难<br><a href="https://imgse.com/i/pVVGfBV" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVGfBV.png" alt="pVVGfBV.png" loading="lazy"></a></li></ul><h4 id="新的日期时间api-1" tabindex="-1"><a class="header-anchor" href="#新的日期时间api-1"><span>新的日期时间API</span></a></h4><p><a href="https://imgse.com/i/pVVG5AU" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVG5AU.png" alt="pVVG5AU.png" loading="lazy"></a><br><a href="https://imgse.com/i/pVVGH39" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVGH39.png" alt="pVVGH39.png" loading="lazy"></a><br><a href="https://imgse.com/i/pVVG79J" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVG79J.png" alt="pVVG79J.png" loading="lazy"></a><br><a href="https://imgse.com/i/pVVGjHK" target="_blank" rel="noopener noreferrer"><img src="https://s21.ax1x.com/2025/06/19/pVVGjHK.png" alt="pVVGjHK.png" loading="lazy"></a></p><h2 id="其他知识" tabindex="-1"><a class="header-anchor" href="#其他知识"><span>其他知识</span></a></h2><h3 id="new-与-of-的区别对比表" tabindex="-1"><a class="header-anchor" href="#new-与-of-的区别对比表"><span><code>new</code> 与 <code>.of()</code> 的区别对比表</span></a></h3><table><thead><tr><th>特性</th><th><code>new</code></th><th><code>.of()</code></th></tr></thead><tbody><tr><td>可变性</td><td>可变（Mutable）</td><td>不可变（Immutable）</td></tr><tr><td>可接受 null</td><td>✅ 可以</td><td>❌ 不可以</td></tr><tr><td>Java 版本</td><td>所有版本</td><td>Java 9+（部分 IDE 可回溯到 Java 8）</td></tr><tr><td>用途</td><td>自定义、修改集合</td><td>快速定义只读集合</td></tr><tr><td>示例</td><td><code>new ArrayList&lt;&gt;()</code></td><td><code>List.of(&quot;a&quot;, &quot;b&quot;)</code></td></tr></tbody></table><h3 id="🎯-哪个该用" tabindex="-1"><a class="header-anchor" href="#🎯-哪个该用"><span>🎯 哪个该用？</span></a></h3><table><thead><tr><th>场景</th><th>推荐使用</th></tr></thead><tbody><tr><td>临时只读小集合</td><td><code>.of()</code></td></tr><tr><td>需要添加或修改元素</td><td><code>new</code></td></tr><tr><td>兼容旧版 Java</td><td><code>new</code></td></tr><tr><td>创建对象（非集合）</td><td><code>new</code>（必须）</td></tr></tbody></table>`,51)]))}const d=s(n,[["render",h]]),k=JSON.parse('{"path":"/posts/xiaomi/Day4Java8%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"Day4 Java8新特性","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-06-19T00:00:00.000Z","category":["小米训练营"],"description":"Day4 Java8新特性 函数式编程 优点 简化代码，增强可读性 特点 纯函数 不可变性 高阶函数 声明式函数 递归 新知识final和effective final：当定义的变量实际没有更改的时候，Java会在运行时隐式的将其改为final。 所有的函数式编程都是值传递，不是引用传递 函数式编程（FunctionalInterface注解--函数式...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day4 Java8新特性\\",\\"image\\":[\\"https://s21.ax1x.com/2025/06/19/pVVZItP.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVZxkq.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVlysf.png\\",\\"https://s21.ax1x.com/2025/06/19/pVV3ABT.png\\",\\"https://s21.ax1x.com/2025/06/19/pVV3kuV.png\\",\\"https://s21.ax1x.com/2025/06/19/pVV3YUe.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVGfBV.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVG5AU.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVGH39.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVG79J.png\\",\\"https://s21.ax1x.com/2025/06/19/pVVGjHK.png\\"],\\"datePublished\\":\\"2025-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-24T00:35:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/xiaomi/Day4Java8%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"Day4 Java8新特性"}],["meta",{"property":"og:description","content":"Day4 Java8新特性 函数式编程 优点 简化代码，增强可读性 特点 纯函数 不可变性 高阶函数 声明式函数 递归 新知识final和effective final：当定义的变量实际没有更改的时候，Java会在运行时隐式的将其改为final。 所有的函数式编程都是值传递，不是引用传递 函数式编程（FunctionalInterface注解--函数式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s21.ax1x.com/2025/06/19/pVVZItP.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-24T00:35:32.000Z"}],["meta",{"property":"article:published_time","content":"2025-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-24T00:35:32.000Z"}]]},"git":{"createdTime":1750347527000,"updatedTime":1750725332000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":2}]},"readingTime":{"minutes":3.17,"words":950},"filePathRelative":"posts/xiaomi/Day4Java8新特性.md","excerpt":"\\n<h2>函数式编程</h2>\\n<p><strong>优点</strong><br>\\n简化代码，增强可读性<br>\\n<strong>特点</strong></p>\\n<ul>\\n<li>纯函数</li>\\n<li>不可变性</li>\\n<li>高阶函数</li>\\n<li>声明式函数</li>\\n<li>递归<br>\\n<em>新知识final和effective final：当定义的变量实际没有更改的时候，Java会在运行时隐式的将其改为final。</em><br>\\n<strong>所有的函数式编程都是值传递，不是引用传递</strong></li>\\n</ul>\\n<h3>函数式编程（FunctionalInterface注解--函数式接口）</h3>","autoDesc":true}');export{d as comp,k as data};
