import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-r6MPGHfX.js";const o={};function s(d,e){return n(),t("div",null,e[0]||(e[0]=[a(`<h1 id="零散知识小记" tabindex="-1"><a class="header-anchor" href="#零散知识小记"><span>零散知识小记</span></a></h1><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>SpringBoot</span></a></h2><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h3><ul><li><p><code>@Component</code> 和 <code>@Bean</code> 的区别：<br> 两者都是将某个 Bean 装配到 Spring 容器中，但应用场景不同。<code>@Component</code> 通常用于我们自己编写的类（如 Controller、Service 等），直接加在类上；而 <code>@Bean</code> 是用于方法上，方法返回的是要装配的对象，常用于配置类中装配第三方类或依赖（这些类无法直接加注解）。推荐在 <code>@Configuration</code> 标注的类中使用 <code>@Bean</code>，否则 Spring 不会自动识别注册。</p></li><li><p><code>@RestController</code> 和 <code>@Controller</code> 的区别：<br><code>@Controller</code> 用于传统的 MVC 开发，返回的是页面视图。如果要返回 JSON，需要额外加 <code>@ResponseBody</code>。而 <code>@RestController</code> 则用于前后端分离项目，默认将返回值写入响应体，适合构建 RESTful 接口。</p></li><li><p><code>@RequestBody</code>：用于将 HTTP 请求体（如 JSON、XML）的内容映射到 Java 对象。</p></li><li><p><code>@PathVariable</code>：用于从 URI 路径中提取参数值并映射到方法参数，适用于 RESTful 接口。</p></li></ul><h2 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h2><h3 id="gitattributes-文件说明" tabindex="-1"><a class="header-anchor" href="#gitattributes-文件说明"><span><code>.gitattributes</code> 文件说明</span></a></h3><p><code>.gitattributes</code> 是一个用于告诉 Git 如何处理项目中文件的配置文件，特别适用于跨平台开发环境中处理换行符问题和二进制文件差异比较。</p><h4 id="文本文件处理" tabindex="-1"><a class="header-anchor" href="#文本文件处理"><span>文本文件处理</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>* text=lf</span></span>
<span class="line"><span>*.sh text</span></span>
<span class="line"><span>*.md text</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>* text=lf</code>：对所有文件启用文本归一化，Git 会将换行符统一转换为 LF（Unix 风格）。</li><li><code>*.sh text</code> 和 <code>*.md text</code>：指定 <code>.sh</code> 和 <code>.md</code> 文件也作为文本处理。</li></ul><blockquote><p>Windows 使用 CRLF（\\r\\n），Unix/Linux/macOS 使用 LF（\\n），统一换行符可避免冗余 diff。</p></blockquote><h4 id="二进制文件处理" tabindex="-1"><a class="header-anchor" href="#二进制文件处理"><span>二进制文件处理</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>*.png binary</span></span>
<span class="line"><span>*.jepg binary</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定 <code>.png</code> 和 <code>.jepg</code> 文件为二进制类型（应改为 <code>.jpeg</code>）。</li><li><code>binary</code> 相当于 <code>-text -diff</code>，不做换行符处理，也不显示 diff 差异。</li></ul><h3 id="git-rebase-i-命令说明" tabindex="-1"><a class="header-anchor" href="#git-rebase-i-命令说明"><span><code>git rebase -i</code> 命令说明</span></a></h3><p><code>git rebase -i</code>（交互式 rebase）用于整理提交历史，特别适合合并多个临时提交。</p><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令：</span></a></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>pick</code></td><td>保留该提交</td></tr><tr><td><code>squash</code></td><td>将该提交合并入上一个 <code>pick</code> 提交，允许修改提交信息</td></tr><tr><td><code>fixup</code></td><td>同 <code>squash</code>，但直接丢弃该提交信息</td></tr><tr><td><code>reword</code></td><td>保留提交，但允许修改该提交信息</td></tr><tr><td><code>edit</code></td><td>停在该提交供你修改内容（如代码修复）</td></tr><tr><td><code>drop</code></td><td>删除该提交</td></tr></tbody></table><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h4><p>合并最近 5 条提交：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rebase</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HEAD~5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改弹出的提交列表，把第二条及以后的 <code>pick</code> 改为 <code>squash</code> 或 <code>fixup</code>，保存后编辑合并提交说明。</p><h4 id="推送变更" tabindex="-1"><a class="header-anchor" href="#推送变更"><span>推送变更：</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于 rebase 修改了历史，需强制推送（注意与团队协作沟通）。</p><hr><p>通过 <code>.gitattributes</code> 和 <code>git rebase -i</code>，我们可以更规范地管理提交历史和文件处理规则，提升协作效率。</p>`,27)]))}const l=i(o,[["render",s]]),p=JSON.parse('{"path":"/posts/others/%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%9A%84%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%82%B9.html","title":"零散知识小记","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-07-16T00:00:00.000Z","tag":["小知识"],"description":"零散知识小记 SpringBoot 注解 @Component 和 @Bean 的区别： 两者都是将某个 Bean 装配到 Spring 容器中，但应用场景不同。@Component 通常用于我们自己编写的类（如 Controller、Service 等），直接加在类上；而 @Bean 是用于方法上，方法返回的是要装配的对象，常用于配置类中装配第三方类...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"零散知识小记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-21T05:33:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jing104\\",\\"url\\":\\"https://jing104.blog\\"}]}"],["meta",{"property":"og:url","content":"https://jing104.blog/posts/others/%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%9A%84%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"Jing104-Note"}],["meta",{"property":"og:title","content":"零散知识小记"}],["meta",{"property":"og:description","content":"零散知识小记 SpringBoot 注解 @Component 和 @Bean 的区别： 两者都是将某个 Bean 装配到 Spring 容器中，但应用场景不同。@Component 通常用于我们自己编写的类（如 Controller、Service 等），直接加在类上；而 @Bean 是用于方法上，方法返回的是要装配的对象，常用于配置类中装配第三方类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-21T05:33:02.000Z"}],["meta",{"property":"article:tag","content":"小知识"}],["meta",{"property":"article:published_time","content":"2025-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-21T05:33:02.000Z"}]]},"git":{"createdTime":1752667870000,"updatedTime":1753075982000,"contributors":[{"name":"于钊京-2207020114-Java五组-中石油学员","username":"","email":"2783238859@xiaomi.com","commits":1},{"name":"YuZhaojing","username":"YuZhaojing","email":"zhaojing.yu@raysense.com","commits":1,"url":"https://github.com/YuZhaojing"}]},"readingTime":{"minutes":2.27,"words":680},"filePathRelative":"posts/others/零零散散的知识小点.md","excerpt":"\\n<h2>SpringBoot</h2>\\n<h3>注解</h3>\\n<ul>\\n<li>\\n<p><code>@Component</code> 和 <code>@Bean</code> 的区别：<br>\\n两者都是将某个 Bean 装配到 Spring 容器中，但应用场景不同。<code>@Component</code> 通常用于我们自己编写的类（如 Controller、Service 等），直接加在类上；而 <code>@Bean</code> 是用于方法上，方法返回的是要装配的对象，常用于配置类中装配第三方类或依赖（这些类无法直接加注解）。推荐在 <code>@Configuration</code> 标注的类中使用 <code>@Bean</code>，否则 Spring 不会自动识别注册。</p>\\n</li>\\n<li>\\n<p><code>@RestController</code> 和 <code>@Controller</code> 的区别：<br>\\n<code>@Controller</code> 用于传统的 MVC 开发，返回的是页面视图。如果要返回 JSON，需要额外加 <code>@ResponseBody</code>。而 <code>@RestController</code> 则用于前后端分离项目，默认将返回值写入响应体，适合构建 RESTful 接口。</p>\\n</li>\\n<li>\\n<p><code>@RequestBody</code>：用于将 HTTP 请求体（如 JSON、XML）的内容映射到 Java 对象。</p>\\n</li>\\n<li>\\n<p><code>@PathVariable</code>：用于从 URI 路径中提取参数值并映射到方法参数，适用于 RESTful 接口。</p>\\n</li>\\n</ul>","autoDesc":true}');export{l as comp,p as data};
